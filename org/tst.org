* House
*** Faucet
    Danco stops
*** Misc
**** NEXT [#C] Replace shower handle in kids room
     Added: [2013-07-21 Sun 08:26]
**** NEXT [#C] Clean out my drawer
     Added: [2013-07-21 Sun 09:10]
**** NEXT Add light to downstairs closet
     Added: [2013-07-21 Sun 18:12]
**** NEXT [#B] Make door for bookcase cubby
     Added: [2013-07-21 Sun 09:10]
* Projects
** Kids
:PROPERTIES:
:CATEGORY: Kids
:END:
*** Wiggy School
**** TODO [#A] Wiggy school
     Added: [2013-07-21 Sun 01:34]
**** DONE [#A] Get wiggy uniform
CLOSED: [2013-07-25 Thu 21:21]
- State "DONE"       from "WAITING"    [2013-07-25 Thu 21:21] \\
  Got uniforms
     Added: [2013-07-21 Sun 08:30]
**** NEXT [#A] Signup for e-scrip
     Added: [2013-07-21 Sun 08:31]
**** DONE [#A] Reply to Mrs Fisher
CLOSED: [2013-07-25 Thu 21:21]
- State "DONE"       from "NEXT"       [2013-07-25 Thu 21:21] \\
  Mrs Fischer sent evite
     Added: [2013-07-21 Sun 08:31]
**** WAITING [#A] Get wiggy health form for school
- State "WAITING"    from "TODO"       [2013-07-21 Sun 23:21] \\
  Waiting for reply from Dr Kapoor
     Added: [2013-07-21 Sun 09:37]
*** Kids misc
**** DONE Get Nanu gate setup
CLOSED: [2013-07-28 Sun 00:32]
- State "DONE"       from "NEXT"       [2013-07-28 Sun 00:32] \\
  Finished
     Added: [2013-07-21 Sun 18:01]
** Another test
<2013-09-01 Sun 18:35>--<2013-09-02 Mon 05:00>
DEADLINE: <2013-09-01 Sun> SCHEDULED: <2013-09-01 Sun>
:LOGBOOK:
CLOCK: [2013-09-03 Tue 01:18]--[2013-09-03 Tue 01:18] =>  0:00
CLOCK: [2013-09-01 Sun 17:00]--[2013-09-01 Sun 17:05] =>  0:05
CLOCK: [2013-09-01 Sun 17:10]--[2013-09-01 Sun 17:20] =>  0:10
CLOCK: [2013-09-01 Sun 17:50]--[2013-09-01 Sun 18:00] =>  0:10
:END:
:PROPERTIES:
:END:
another
** Btitle test2
:LOGBOOK:
CLOCK: [2013-09-03 Tue 01:19]--[2013-09-03 Tue 01:20] =>  0:00
:END:   
** Ctitle test3
:LOGBOOK:
CLOCK: [2013-09-01 Sun 01:19]--[2013-09-03 Tue 01:20] =>  0:00
:END:   



* TEst
#+BEGIN_SRC emacs-lisp
    ;; Technique
    ;; org-map-entries
    ;; org-entry-properties with time argument.
  ;;  (org-entry-properties nil 'special "CLOCK") ;; This provides all time tags.
    ;; time tags are retrieved as an alist.
    ;;  however time ranges outside of clock only 
    ;; map alist to a date or to a date range.
    ;; consolidate dates, and date ranges.
    ;; Date tree with link org-make-link-string
    ;; 
    ;; org-entry-beginning-position
    ;; org-entry-end-position
    ;; org-scanner-tags
    ;; org-trust-scanner-tags t  locally
    ;; org-entry-properties with time argument.
   ;; (org-entry-properties nil 'special "CLOCK") ;; This provides all time tags.
    ;; Regular expression search for clock
    ;; ^[ \t]*"  org-clock-string  "[ \t]*\\(?:\\(\\[.*?\\]\\)-+\\(\\[.*?\\]\\)
    ;; re-search-forward has an optional argument for limit to limit search.
    ;; Consolidate all time values into day, month, year.
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  
  (defun org-datetree-report-heading-info ()
    "This function acts upon an org heading.
  It extracts the following time information from the heading
  timestamp, deadline, scheduled, clock
  It returns either: 
    1. a vector of size 4.  : for each of the 4 time types
    2. nil                  : if there is no time information
  The four vector elements directly correspond to the 4 time types.
  Each element of the vector is a list of times for that time type."
  
    (let ((t_arr (make-vector 4 nil))  
          (tstring ["TIMESTAMP" "DEADLINE" "SCHEDULED" "CLOCK"]))
      (dolist (entry ;; each entry in 
                (org-entry-properties nil 'special "CLOCK") ;; list of timetags
                t_arr) ;; temporary var
        (let* ((propname (car entry))
               ;; Find what kind of time tag
               (pos (position propname tstring :test 'equal)))
          (if pos  
              ;; Append it to a list for that type of timetag.
              (aset t_arr pos (append (elt t_arr pos) 
                                      (list (cdr entry))   ))
            )))
       ;; If any of the timestamps are present, return the headline and timestamps
       ;; else return nil
       (if (position nil t_arr :test-not 'equal)
           (cons (nth 4 (org-heading-components)) (copy-sequence t_arr) )
         nil)
       ))
  
    
  (defun org-datetree-report-insert(hding_daylist)
    (let* ((text (car hding_daylist))
           (days (cdr hding_daylist)))
  
      (mapc (lambda(day) 
              (progn
                (org-datetree-find-date-create 
                 (calendar-gregorian-from-absolute day) t)
                ;;(outline-next-heading)
                ;;(org-insert-item)
                ;;(insert text)
                (end-of-line)
                (org-insert-subheading nil)
                (insert text)
              ))
            days)) )
      
  (defun org-datetree-report-heading-format (heading_info)
    ;;  heading_info is a cons
    ;;  car: text of heading
    ;;  cdr: vector with time string for different time tags
    (let* ((heading (car heading_info))
           (formatted_heading (org-make-link-string (copy-sequence heading)))
           (ts (cdr heading_info))
           daylist )
      ;; ts is a vector. Each element is a list of strings or nil
      ;; map each list of strings to a date,
      ;; flatten vector
      ;; keep unique dates.
      (setq daylist
            (delq nil (delete-dups   
                       (apply 'append ;; Flatten
                              (mapcar 
                               (lambda (tstr_list) 
                                 (if tstr_list  
                                     (mapcar 
                                        (lambda (tstr) 
                                          (org-time-string-to-absolute tstr)) 
                                      tstr_list)))  
                               ts)))))
      (cons formatted_heading  daylist)))
    
  
  (defun org-dblock-write:myblock (&optional match scope)
      "Get dates/time/clock and create a datetree"
      (let* ( (mappedvals 
              (org-map-entries 'org-datetree-report-heading-info match scope))
              (heading_info (remove nil mappedvals)) 
              (hding_daylists 
                (mapcar 'org-datetree-report-heading-format  heading_info)) )
        
        (print "printing hding_daylists")
        (print hding_daylists)
        (save-restriction
  
          ;; Add header and narrow buffer
          (org-beginning-of-dblock)
          (let ((startp (point)))
            (forward-line 1)
            (org-insert-subheading nil)
            (insert "Journal Report\n")
            (insert ":PROPERTIES:\n:DATE_TREE: t\n:END:\n")
            (narrow-to-region startp (point)) )          
          
          ;; Write each relevent heading
          (mapc 'org-datetree-report-insert hding_daylists)
  
          ;; Time functions
          ;; From org to seconds : org-time-string-to-seconds
          ;; From org to day : org-time-string-to-absolute
          ;; From seconds to day : (time-to-days (seconds-to-time)
          ;; From day to gregorian: (calendar-gregorian-from-absolute)
          )
        )
      )
#+END_SRC

* Test2
#+BEGIN: myblock

** Journal Report
:PROPERTIES:
:DATE_TREE: t
:END:
*** 2013
**** 2013-09 September
***** 2013-09-01 Sunday
****** [[Ctitle%20test3][Ctitle test3]]
****** [[Another%20test][Another test]]
***** 2013-09-03 Tuesday
****** [[Btitle%20test2][Btitle test2]]
****** [[Another%20test][Another test]]


#+END:

       
