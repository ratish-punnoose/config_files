* Emacs
** MS Windows Install
*** Libraries for images and zlib
    Available for download at ezwinports
    (http://sourceforge.net/projects/ezwinports)
    - Check value of variable dynamic-library-alist . This contains
      names of dlls.
    -
** Selection
   - C-x h              :: Select all
   - C-x w ::   Copy Word (RJP Custom)
** Registers
   - C-x r  :: Common prefix for all register operations
   - M-x view-register R :: view contents of register R
*** Positions
    - SPC R :: Saves bookmark to location in register R
    - j   R ::  Jumps to position in register R
*** Bookmarks (Persistent positions)
    - m [BOOKMARK] :: Save bookmark with optional name BOOKMARK
    - b BOOKMARK :: Jump to bookmark named bookmark
    - l :: List all bookmarks
*** Text
    - s   R :: Save text to register R
    - i   R :: Insert text from register R
    - r   R :: Save rectangle to register R
    - i   R :: Insert rectangle from register R
    - n   R :: Save number to register R (C-u 1000 C-x r n R)
*** Window config
    - w   R :: Save window config of current frame to register R
    - f   R :: Save window config of all frames to register R
    - j   R :: Restore window config
*** Keyboard Macros
    - j   R :: execute macro in register R
    - C-x C-k x R :: Save macro toregister R

** Rectangle
   - C-x r k            :: Kill rectangle
   - C-x r y            :: Yank rectangle
   - C-x r t            :: Insert rectangle.  This is a superb command. To insert
        the same text on multiple rows, just select the beginning and
        end, C-x r t and then type in the characters to insert on
        every row.
   - C-x SPC ::  Rectangular selection.  Selection is no different
                 except that highlighting is rectangular.
** Picture mode
   - C-c C-k :: kill rectangle
   - C-c C-y :: Yank rectangle
   - C-c C-w X :: Kill to register A
   - C-c C-x X :: Yank from register X
** Artist mode
   Use artist mode to help draw free-form diagrams
   - C-c C-a is the prefix for all commands
     - C-e :: artist-select-erase-char
     - C-f :: artist-select-fill-char
     - C-l :: artist-select-line-char
     - C-o :: artist-select-operation
     - C-r :: artist-toggle-rubber-banding
     - C-t :: artist-toggle-trim-line-endings
     - C-s :: artist-toggle-borderless-shapes)
     - l   :: artist-select-op-line
     - L   :: artist-select-op-straight-line
     - r   :: artist-select-op-rectangle
     - R   :: artist-select-op-square
     - s   :: artist-select-op-square
     - p   :: artist-select-op-poly-line
     - P   :: artist-select-op-straight-poly-line
     - e   :: artist-select-op-ellipse
     - c   :: artist-select-op-circle
     - t   :: artist-select-op-text-see-thru
     - T   :: artist-select-op-text-overwrite
     - S   :: artist-select-op-spray-can
     - z   :: artist-select-op-spray-set-size
     - C-d :: artist-select-op-erase-char
     - E   :: artist-select-op-erase-rectangle
     - v   :: artist-select-op-vaporize-line
     - V   :: artist-select-op-vaporize-lines
     - C-k :: artist-select-op-cut-rectangle
     - M-w :: artist-select-op-copy-rectangle
     - C-y :: artist-select-op-paste
     - f   :: artist-select-op-flood-fill
     - C-b :: artist-submit-bug-report
   - C-c C-c for canceling
** Editing
   - M-l/u :: Turn following word to lowercase/uppercase
   - C-x C-l/u ::  downcase/upcase region
   - C-d :: Delete char
   - M-d :: Delete word
   - M-Del or M-Bkspc :: Delete word backwards
   - C-k :: Kill to end of line
   - M-k :: Kill to end of sentence
   - M-d :: Kill next word
** Navigation
   - C-M n              :: Jump to end of matching paren
   - C-M p              :: Jump to begin of matching paren
   - C-t :: Tags search.  Use down arrow to pick word at point.
   - Alt-, :: Next tag
   - Alt-. :: Find tag under cursor
   - C-Spc C-Spc::  Set mark
   - C-u C-Spc :: Jump to previous mark
   - C-f :: Forward one char (same as right arrow)
   - C-b :: Backward one char (same as left arrow)
   - M-f :: Forward a word
   - M-b :: Backward a word
   - C-a :: Start of line
   - C-e :: End of line
   - M-a :: Start of sentence
   - M-e :: End of sentence
** Lisp
   Also see paredit (obsolete).  Now see lispy
*** Evaluation
    - C-x C-e :: Evaluate Lisp in *scratch* before cursor and print
                 result in minibuffer
    - C-j :: Evalute Lisp but insert result after cursor.
*** Paredit
**** Movement
     - C-M-f/C-M-b :: Move forward/backward dexp
     - C-M-@ :: highlight sexp
     - C-M-u :: expand selection upwards
     - C-M-d :: next enclosed dexp
**** Deletion
     - C-M-k :: Delete
     - C-M-Backspace :: delete sexp before cursor
**** Indentation
     - C-M-q :: indent whole func with cursor on (
**** Insertion
     - M-(  :: a pair of parens
     - C-u 2 M-( :: enclose the next 2 sexps with paren
**** Code completion
     - C-c TAB :: automatic completion for (defv to (defvar
**** Code comment
     - M-; :: Add line comment
*** Lispy
**** Works anywhere
     - [ / ] :: Jump to closest paren backward/forward
     - Number argument ::
     - Backspace :: Deletes sexp backward.  If at first char of ",
                    sexp, jumps to matching end.  Next backspace will
                    delete whole sexp
     - C-K :: Deletes sexp
     - C-M-, :: Select sexp
     - J ::  Outline next. where outline is marked by ;;
     - K ::  Outline prev
     - C-1 ::  Describe inline
     - C-2 :: Describe arglist inline
**** Works at sexp
     - a :: ace jump to symbol
     - q :: ace jump to paren
     - b :: move back in history
     - c  :: clone
     - i :: indent, hide/show outline, mark car if active
       - mi : marks fist elem of list
     - m :: mark list
     - n ::  copy sexp to kill ring
     - d :: Switch to opposite brace
     - e :: eval region or sexp
     - f :: flow in direction
     - g :: goto tag (after collecting)
     - p :: eval the current sexp in context of other window (good for
            debugging)
     - u :: undo
     - r :: raise to parent (remove parent)
     - s :: move sexp down within parent
     - w :: move sexp up within parent
     - t :: teleport.  Move sexp/region to location given by ace paren.
     - tt :: telport to any sexp in window
     - v :: Move/scroll window show cursor is at top. Next v restores.
     - >/< :: Grow/reduce slurp/barf  with numeric arg 0, grow as far
              as possible
       - slurp/barf correspond to grow reduce at end of sexp
       - but watch out on front.
     - A :: go to beginning of defun, jump back
     - C :: convolute the two closest outer parents
     - F ::  jump to definition of symbol or first symbol in sexp
     - I ::  Outlines like org-mode ;;*, ;;** etc.
     - Alt-Enter :: New outlin
     - Alt-Left :: Outline move
     - J/K :: Move up/down in outline
     - N/W :: Narrow widen
     - P ::  Yank/paste
     - V :: Projectile visit
     - 2V :: Projectile visit in other window
     - xb :: Transform to let binding
     - xc :: IF to COND
     - xi :: COND to IF
     - xd :: Transform lambda or selected block to defun
     - xl :: defun to lambda
     - xf :: Flatten to see what function/macro does
     - xe :: edebug
     - Z :: stop edebug
     - xB :: Store first region for ediff reference
     - B :: ediff previously stored region with current
     - xh :: Get help (describe function or variable. For var it
             should be selected. 2m,3m, a )
*** Debugging
    Use Lispy keys as they are easier.
**** Lispy debug
     - xe :: Instrument for debugging
     - e :: Evaluate for function (remove instrumentation)
**** Main keys
     - M-x edebug-defun :: In definition of func, to enable debuging
     - M-x edebug-trace ::
     - M-x eval-defun ::  Stop function instrumentation
     - i :: Step in
     - o :: Step out
     - SPC :: Step by step debug
     - e ::  Print variables value
     - E :: Open edebug window
**** Tracing values
     A custom watch window can be created as follows:
     - Open Edebug window (E)
     - Type in expressions in window
       #+begin_src emacs-lisp
         (current-buffer)
         #<buffer *scratch*>
         ;---------------------------------------------------------------
         (selected-window)
         #<window 16 on *scratch*>
         ;---------------------------------------------------------------
         (point)
         196
         ;---------------------------------------------------------------
         bad-var
         "Symbol's value as variable is void: bad-var"
         ;---------------------------------------------------------------
         (recursion-depth)
         0
         ;---------------------------------------------------------------
       #+end_src
     - C-c C-u :: Build a new evaluation list

** Menu
   - F1 :: show, hide menu.
** Search
    In query-replace-regexp mode C-M-%, use (DOWN ARROW) to copy the word
    under cursor into query-replace arguments (can be done for both
    find and replace arguments)   To search for standalone word use  \bword\b  \b is a boundary marker.
   - rgrep :: Search through multiple files in directory tree through
              file pattern.
   - C-s :: search forward
   - M-s . ::  Search using symbol at point.  Hooks to isearch-forward-symbol-at-point
   - C-s C-*, C-s DOWN :: Search at point.  Requires Ratish's custom addition
   - M-s h . ::  Highlight symbol at point throughout file.
   - M-% :: Search-Replace
   - C-M-% :: Searc-Replace Regexp (Use down arrow to select current symbol)
   - C-r  :: search backward
   - M-p :: Start editing previous search term
** Regexp
*** Basic syntax
    Emacs REs precede Perl. Parentheses have to be escaped.
    - Example: \([a-z]+\) greedy matches for one or more lowercase
      alphabet strings.
    - [0-9]\{3\}-[0-9]\{4\} matches a number of form 111-2222.
    - \(xy\).*\1matches words with xy appearing at least twice.
*** Newlines
    - C-q C-j: quoted insert.
*** Backreferences
    - Written as \n.
    - \& grabs the entire string that matched.
    - \# inserts a decimal count of the number of replacements in
      current command.
      - Useful for making numbered lists. First insertion will show 0.
      - To start at 1, a lisp function can be used.
*** Lisp in regex
    Lisp can be inserted using \,
    - To replace match with 1 indexed numbers.
      - \,(1+ (string-to-int \1)).
      - Note: The lisp parens don't have to be escaped.
    - Any lisp function can be called, even ones with side-effects.
      - \,(find-file-no-select \&)  on a list of files, opens them in
        the background.
    - Example:
      To replace : see [[https://stackoverflow.com/questions/49519627/emacs-replace-regexp-with-incremental-sequence][example link]]
      #+begin_example
      result_A_in_S1-S2.txt
      result_A_in_S1-S2.txt
      result_A_in_S1-S2.txt
      result_A_in_S1-S2.txt
      #+end_example
      with
      #+begin_example
      result_A_in_1000-1003.txt
      result_A_in_1004-1007.txt
      result_A_in_1008-1011.txt
      result_A_in_1012-1015.txt
      #+end_example
      use
      #+begin_example
      M-x query-regexp-replace RET S1-S2 RET
       \,(let ((start (+ 1000 (* 4 \#)))) (format "%d-%d" start (+ start 3))) RET
      #+end_example


** Copy word at point (doesn't seem to work RJP 1/29/16)
   - C-M-SPC M-w :: Select and copy word without moving cursor
   - C-x w ::  Copy word (RJP custom works 2016/02/22)
** IDO mode
*** File open mode C-x C-f
    - // :: goto root directory
    - ~/ :: goto home directory
    - C-f :: go back temporarily to normal find file
** Helm
   Using Helm:
   1. Start up helm-mini using C-x b.  This will give a list
      of buffers.
   2. Select buffers.  Using the C-spc
   3. Perform action using C-z.  This will provide a list of actions.
*** Default config
    - C-x c ::  Prefix to invoke helm commands
    - RET :: select
    - C-n/p :: up down (in addition to arrow)
    - C-v/M-v :: prev next pages
    - M-< / M-> :: top bottom of buffer
    - C-spc ::  Mark candidate
    - M-a :: Select all candidates
    - C-c C-i :: insert marked candidates into narrowing buffer
    - C-t ::  Switch between horizontal and verital Helm
    - C-w :: yank word at point, starting from point to end of word
         into helm buffer
    - M-n :: yank symbol at point
**** Helm Mini (Buffers)
     Filter patterns
     - *<major-mode> or !*<major-mode> :: Filter by mode,
          eg. *!lisp,!sh,!fun to filter all except for
          lisp,sh,fundamendal mode buffers.
     - /directory/ :: Narrows to buffers that are in
          directory. E.g. /.emacs.d/ narrows to buffers in dir.
     - ^pat :: buffer name starts with pat
     - @searchterm :: Narrows to buffers that have searchterm
     - C-s :: helm-moccur whill show matching searchterms
**** Helm find files
     Can also create files and directories (append slash)
     - C-s :: grep the file
     - C-u C-s :: recursively grep
     - ~/ / ./  :: at end of pattern to reach home, root, start dir
     - C-u helm-find-files :: Prefix command will list visited
          directories, can jump there.
     - C-c h :: In find-files session, use this to show visited files
          directories. Can jump from there.
     In this mode, the files can be narrowed by fuzzy matching.  At
     any time with the list of helm selections. use C-s to search
     through the file live.  A recursive file can also be made.
     Here is a cool sequence of actions
     1. helm find files.
     2. narrow down to certain files
     3. Do C-s to search.
     4. Do C-z and select save to grep buffer.
     5. In grep buffer, use C-Up, C-Dn to move up/down the grep
        buffer, while each item is shown in the next window.
     6. Use C-o to edit the grep item in the other window.


**** Help regexp
     - <prefix> r :: regexp interactive
**** Occur
     - <prefix> o :: helm occur  (Custom)
**** Helm Mark rings
     Mark buffers by C-SPC C-SPC.  This starts a mark and ends a
     mark.  But by using helm mark rings, you can get back to this bookmark.
**** registers
     - <prefix> C-x r i :: View register (helm-register)

*** Custom config
    - TAB :: Action Menu for  Persistent action
    - C-z ::  execute persistent action
*** Helm Projectile
    - C-c p p :: Switch/start project
    - C-c p f :: Find file in project
    - M-SPC ::  Mark files
    - C-c p p [C-u] C-s :: Search files. with C-u recursive.
    - C-c p s g :: Keeping cursor on symbol, search through project
** Hideshow
   - C-c @ ESC C-s :: show all
   - C-c @ ESC C-h :: hide all
   - C-c @ C-s :: show block
   - C-c @ C-h :: hide block
   - C-c @ C-c :: toggle hide/show
   - C-,  :: toggle for a block (custom)
   - C-M-, :: toggle for whole buffer

** VHDL mode
*** Template generation
    After typing a VHDL keyword and entering 'SPC' youa re prompted
    for arguments.  'RET' or C-g to cancel. Optional arguments are
    indicated by square brackets.  Explicit invocation C-c C-i- C-c.
*** Header insertion
    C-c C-t C-h :: insert header.  Look for customization
    `vhdl-header.
*** Stuttering
    Double striking of keys inserts cumbersome VHDL syntax elements.
    Enable by enabling 'vhdl-stutter-mode
    - ;;  ::  " : "
    - ;;; ::  " := "
    - ..  ::  "  => "
    - ==  ::  " = = "
    - [ ::  (
    - ] ::  )
    - [[ :: [
    - ]] :: ]
    - '' :: \"
    - -- ::  comment
    - --CR ::  comment out
    - ---  ::  horizontal line
    - ---- ::  display comment
*** Word Completion
    Typing Tab looks for a VHDL keyword or a word in the
    buffer. Retyping TAB toggles through alternative completions.
    Typing Tab after "("  inserts complete parenthesized expressions
*** Alignment
    Aligning operators, keywords, to beautify.
    Prefix is C-c C-aa
    - C-c C-a C-a :: aligns a group of consecutive lines
    - C-c C-a C-i :: aligns block withs same indent
    - C-c C-a C-d :: all lines within declaration
    - C-c C-a M-a :: region
    - C-c C-a C-c :: inline comments
    - C-c C-a M-c :: comemnts for a region
*** Code filling
    Condenses code, by removing comments etc.
    Prefix is C-c C-f
    - C-c C-f C-f :: fills a list enclosed by paren
    - C-c C-f C-g :: group of lines
    - C-c C-f C-i :: block withs ame indent
    - C-c C-f M-f :: entire region
*** Code beautification
    vhdl-beautify-buffer. Can be run non-interactively as
    emacs -batch -I ~/.emacs filename.vhd -f vhdl-beautify-buffer
*** Port translation
    Generic and Port clauses can be copied and then pasted as:
    - C-c C-p C-w :: Copy
    - C-c C-p M-w :: Copy
    - C-c C-p C-f :: Port flatten
    - C-c C-p C-r  :: Reverse ports
    - C-c C-p C-c  :: Paste component
    - C-c C-p C-e :: Paste entity
    - C-c C-p C-i :: Paste instance
    - C-p C-p C-s :: Paste signals
    - C-p C-p C-c :: Paste constants
    - C-p C-p C-g :: Paste generic map
    - C-p C-p C-z :: Paste initializations
    - C-p C-p C-t :: Paste testbench
*** Speedbar
    Automatically opened if 'vhdl-speedbar-auto-open is non-nil
    Check 'vhdl-project-alist
    - f :: file mode
    - h :: hierarchy
    - H :: project hierarcy
*** Structural composition
    - C-c C-c C-n :: Create skeleton for new component
    - C-c C-c C-p :: Place component declaration and instantiation
    - C-c C-c C-w :: Automatically connect subcomponents using rules.
*** Hide-show
    Using vhdl-hs-minor-mode
    vhdl-hideshow-menu : if non nil then start up with hideshow
    vhdl-hide-all-init: if non nil then hide all on startup.
*** Code update
    - C-c C-u C-s : Update sensitivity list in current process
    - C-c C-u M-s : Of all processes in buffer.
*** Code Fixing
    - C-c C-x C-p : Fixes parenthesis

** Latex mode
*** Reftex
    - C-c =  ::  Create a TOC for document
    - C-c (  ::  Insert a label
    - C-c )  ::  Insert a reference
    - C-c [  ::  Insert citation by searching in bibtex database
    - C-c &  ::  With cursor on a cross-reference, view original
**** Multi-file documents
     Add the following at the end of a document.
     Use TeX-master for AucTex mode and tex-main-file for emacs latex

     %%% Local Variables: ***
     %%% mode:latex ***
     %%% tex-main-file: "thesis.tex"  ***
     %%% End: ***


*** Bibtex
    - C-c C-e C-a :: Journal
    - C-c C-e ::
    - C-c C-e ::
** Auctex
   - C-c _ :: Prompt for master file
   - C-c ^ :: Go to master file
   - C-c C-e :: Insert environment
   - C-c C-j :: Next item
   - C-c % :: toggle commenting of paragraph
   - C-c ; :: toggle commenting of region
** Reftex
   - C-c [ :: Insert reference

** UTF8 symbols
   Can get name of a character using describe-char
   In general can be inserted using insert-char SYMBOL_NAME
   - ∈ :: element of
   - ∧ | ∨ :: logical and | or with many options
   - ⇒ :: rightwards double arrow
   - ≔ :: colon equals
** Magit
*** Custom
    - C-x g :: Start magit in buffer (RJP custom), invokes magit-status
*** General
    - C-c M-g :: To start magit popup for blame etc.
    - g :: reload status buffer
    - Tab :: toggle visibility/expand/contract
    - S-Tab :: toggle visibility of subtree
    - s :: Stage. Could be untracked file, modified file, hunk of file
    - S :: Stage All
    - u/U :: unstage/ unstage All
    - k :: Discard/Delete/revert
    - c :: Commit
    - i :: Add file to .gitignore
    - I :: Add file to .git/info/exclude instead of .gitignore
    - Ctrl+W :: Copy SHA of any commit
*** Navigation
    - n/p :: Move by visible section
    - M-n/M-p :: Move by sibling
    - ^ :: Move to parent
*** History
   - l/L :: History (show commit log)  / Verbose
   - Ret or Space :: Expand.  Space is like more.  Keeps your state in
                     top buffer and can scroll through changes.
   - x/X :: Delete all commits after specific commit, but keep files in
          dirty state.  This allows easy rebase.  With capital X, will
            revert all files to that specific commit (i.e., will lose
            all changes)
**** Reflog, Recovering delted commits
      - h :: See the reflog
**** Blame
     - magit-blame-mode :: Annotates lines with author and commit
**** Rebase
     - R :: Rebase
     - E :: Interactive Rebase

*** Stash
   - z/Z :: Create new stash
   - a/A ::  Apply/Pop stash
   - k :: Drop stash
*** Branch
   - b/B :: Switch to branch / Create and switch
** Version control for all types of VCS
   - C-x v ~, vc-revision-other-window :: Shows different version of
        file. Prompts for revision.
   - C-x v l, vc-print-log :: Shows revision log
   - C-x v g, vc-annotate ::  Like git blame
   - C-x v v :: Perform next action, eg. commit
   - C-x v d ::  vc-dir
     - m :: Mark
     - v :: Next action (eg commit)
     - Ret :: Show file
     - C-o  :: display file
     - SPC ::  next line
     - M :: mark all files
     - U ::  unmark all files
     - d ::  dir clean files
     - i :: register a file
     - p :: print log
     - q :: quit
     - u :: unmark
     - x :: hide up to date
     - C-up/down :: prev/next dir
** Buffer  read status
   - C-x C-q :: toggle read status
** Diff
   - M-x ediff-region-wordsize :: Diff a region of a buffer.
** Line number
   - linum-mode :: Line number mode
** Paredit
   These are commands to use with paredit.
   Also check smartparens which may be better.
   Check also "http://danmidwood.com/content/2014/11/21/animated-paredit.html"
   - M-( ::  Wraps the following sexpression with parentheses
   - M-" :: Wraps the S-expression with quotes
   - C->/< :: slurp forward/backward
   - C-}/C-{ :: barf forward
   - C-M-f/b :: move forward/backward in sexp
** Flycheck
   See if flycheck is enabled. Flycheck supersedes flymake.
   - C-c ! c :: Check current buffer
   - C-c ! C :: Clear errors in buffer
   - C-c ! l :: List errors
** Eshell
*** Basics
    - eshell-print, eshell-echo instead of ls.
    - **/*  recursive listing
*** Globs
    Globs work like that in zsh.  Globs also have predicate filters.
**** Examples
     - ;;   echo a*       ; anything starting with 'a'
     - ;;   echo a#b      ; zero or more 'a's, then 'b'
     - ;;   echo a##b     ; one or more 'a's, then 'b'
     - ;;   echo a?       ; a followed by any character
     - ;;   echo a*~ab    ; 'a', then anything, but not 'ab'
     - ;;   echo c*~*~    ; all files beginning with 'c', except backups (*~)
     - ;; Recursive globbing is also supported:
     - ;;   echo */*.c    ; all .c files at current or one level down.
     - ;;   echo **/*.c   ; all '.c' files at or under current directory
     - ;;   echo ***/*.c  ; same as above, but traverse symbolic links
**** Predicate filter
     Predicates select files from a given list that meet a criteria.
     - Predicate filter are added with ([predicate]).
       - Example:  *sh(.), *sh(/)
     - Predicate filters can be stacked.
       - Example: *sh(.L)
     - Predicate filters
***** File Type
      - / :: directories. Example ls -ld *(/) lists all directories
      - . :: regular files
      - * :: executable files
      - s :: sockets
      - p :: pipes
      - @ :: sym links
***** Permission bits
       - r/A/R :: readable (owner/group/world
       - w/I/W :: writable
       - x/E/X :: executable
       - s/S :: setuid/setgid
       - t :: sticky bit
***** Ownership
      - U :: owned by effective uid
      - u(UID|'user') :: owned by user
      - g(GID|'group') :: owned by group
***** File Attributes
       - Size attribute: L[kmp]+-N :: filter based on size N Kb/Mb/blocks
         - *(L-1) : files less than 1 byte
         - *(L+50) : files greater than 50
       - Time attribute :: attr_type + qualifier, where
         - attr_type is one of:
           - a :: access time .  Eg a+30
           - c :: change time
           - m :: modification time
         - qualifer is:
           - [Mwhms]+-(N|'FILE') :: (months/weeks/hours/mins/secs). Default : days
             - If filename is given, then it is relative to that file.
         - Examples
           - bzip2 -9v **/*(a+30); compress everything that hasn't been accessed in 30 days
           - *(.ms-40) :: Files modified less than 40s ago
           - *(.ms-'goo.py') :: Files modified before goo.py


***** Filter negation
      - Filters can be negated
        - Example: *sh(^/)  : containing *sh but not directories.
**** Replacing find
     Using argument predication, the recursive globbing syntax is
     sufficient to replace the use of 'find <expr> | xargs <cmd>' in
     most cases.  For example, to change the readership of all files
     belonging to 'johnw' in the '/tmp' directory or lower, use:
     #+begin_src
     chmod go-r /tmp/**/*(u'johnw')
     #+end_src



*** Modifiers
    Modifiers change the string, file, or list that precede it.
    For help type: eshell-display-modifier-help
    - Modifiers and predicates can be stacked
      - Example:  *sh(.:U)
    - Multiple modifiers can be stacked
      - Example: *sh(.:U:O)
**** FOR SINGLE ARGUMENTS, or each argument of a list of strings:
     - E  :: evaluate again
     - L  :: lowercase
     - U  :: uppercase
     - C  :: capitalize
     - h  :: dirname
     - t  :: basename
     - e  :: file extension
     - r  :: strip file extension
     - q  :: escape special characters
     - S  ::      split string at any whitespace character
     - S/PAT/ :: split string at each occurrence of PAT
**** FOR LISTS OF ARGUMENTS:
     - o :: sort alphabetically
     - O :: reverse sort alphabetically
     - u :: uniq list (typically used after :o or :O)
     - R :: reverse list
     - j ::      join list members, separated by a space
     - j/PAT/ ::  join list members, separated by PAT
     - i/PAT/ :: exclude all members not matching PAT
     - x/PAT/  :: exclude all members matching PAT
     - s/pat/match/ ::  substitute PAT with MATCH
     - g/pat/match/  :: substitute PAT with MATCH for all occurrences
**** EXAMPLES:
     - *.c(:o)  sorted list of .c files
     - *.c(:o:R) reverse sorted list


*** Parsers
    - Lisp parser:
      - ( ... )
      - $( ... ) … useful for string evaluation
    - Shell parser:
      - no parens … in other words, the default
      - { ... }
      - ${ ... } … useful for string evaluation
      - In shell parser, reference variables with $

*** Command History
    - !! :: last command
    - !ls :: last command starting with ls
    - !?ls :: last command containing ls
    - !ls<tab> :: completion showing commands
*** Directory history
    - cd = :: List history
    - cd -<NUMBER> :: go to previous dir
    - cd =<REGEXP> :: go to first dir matching regexp
    - cd str1 str2 :: Take current pwd, replace str1 with str2 (regexp supported) and change to new dir
      - Example:  If current dir is /some/path/to/target/curr/direct, cd target* . will change to directory "target" in hierarchy
*** Directory Variables
    - $- :: Previous working directory
    - $+ :: Current working directory (doesn't work correctly).
    - $_ :: Last argument of last command
*** Iteration
    for VAR in TOKENS {command}
    Examples
    #+begin_verse
    for f in v1 v2 {scp info.php $f/tst.x}
    for f in {ls -ld} { echo $f; echo $f}
    #+end_verse
*** Redirection
**** Commands
     - > :: Overwrite
     - >> :: Append
     - >>> :: Insert
**** Buffer targets
     Are refered to as #<buffername>  eg.  #<*scratch*>
**** Lisp variables
     Are referred to as #'var
     Avoid clobbering existing vars.
     - echo foo bar baz > #'myvar
**** Special devs
     - /dev/clip :: Clipboard
     - /dev/kill :: Kill ring
** Tramp
   Syntax for remote access
   - /ssh:hostname:dir :: ssh to machine
   - /ssh:[username1@]hostname|ssh:[username2@]hostname2 :: pass through
   - /ssh:[username@]hostname|sudo:hostname :: Have to keep the
   - From eshell :: Use quotes. otherwise the | looks like a pipe character.
** Info files
*** Using info
**** Basics
     - l :: go to previous node/ backward history
     - r :: go in forward history direction
     - Page up / Page down
     - SPC :: Like Page down but will move to next item
     - Backspace/Del :: Like Page Up but will also move to previous item
     - ] :: next item in tree
     - [ :: previous item in tree
     - b :: beginning of node
     - n :: next at current level
     - p :: previous at current level
**** Menu and crossreferences
     - m  :: Pick menu item
     - f :: Pick cross reference
     - tab :: Next menu item or cross-reference
     - Shift-tab :: Previous menu item or cross-reference
     - Ret :: Visit content of menu item or Cross reference
     - f? :: List all cross references.
     - i :: Short-cut to main index.
     - L :: creates a virtual node with list of visited nodes
     - d :: Get to main directory.
**** Search
     - s :: serach info file for string


*** Creating documentation
    See [[https://www.emacswiki.org/emacs/ExternalDocumentation]].
    - Copy .info file to /usr/share/info or path pointed by INFOPATH.
    - File can also be kept compressed.
    - Run install-info myfile.info dir
**** Creating python documentation
     1. Install python3-sphinx.
        #+begin_src
        pip install sphinx
        #+end_src
     2. Generate documentation from cpython docs.
        #+begin_src
         wget https://github.com/python/cpython/archive/master.tar.gz
         tar xf master.tar.gz
         cd cpython-master/Doc
         sphinx-build -b texinfo -d build/doctrees . build/texinfo
         cd build/texinfo && make
         mv python.info ~/.local/share/info
         cd ~/.local/share/info
         install-info python.info dir
        #+end_src
** Dired
*** Invoking dired
    - C-x d :: Start
    - C-x C-f :: With dir name
    - C-x 4 d :: In other window
    - C-x 5 d :: In other frame
*** Motion
    - n/p :: forward backward
    - j :: jump to entry
    - ^ :: Move up dir
*** View
    - i :: Insert contents of dir at point into dired buffer
    - g :: Update dired buffer
    - l :: Update specific files
    - s :: toggle sort order between alphabetical, date/time
*** Editing dired buffer
    - C-x C-q :: Enter edit mode.
    - C-c C-c :: Apply changes
    - C-c C-k :: Abort changes
*** Selections
    - m :: Mark
    - * m :: Mark for line or selection
    - u :: remove mark
    - * u :: Unmark line or selection
    - U :: Unmark all marks
    - # :: Select all auto-save files
    - * * :: Mark executables
    - * @ :: Mark sym links
    - * / ::  Mark all directories (., .. are excluded).
      - With argument unmark
    - * s :: Mark all files in current subdir
    - * % REGEXP :: mark that match regexp
    - ~ :: Flag all backups
    - . :: Flag excess numeric flags
    - t :: Toggle selection
    - Del :: Unmark previous line
    - d :: Mark for deletion
    - % d REGEXP :: Flag for deletion with regexp
    - u :: Remove mark for deletion
    - $ :: Hide subdirec
    - M-$ :: Hide all subdirs
**** Mark characters
     The typical mark characters are * and D. However the files that
     have been marked with * or D can be marked with a different
     character temporarily. Using <SPC> removes mark.
     - * c oldmarkchar newmarkchar :: Change mark for items selected
          with oldchar to newmarkchar
     - Example:
       - Put D flags on all files that have no marks, while unflagging
         all those have D flags
         - * c D t  * c <SPC> D  * c t <SPC>



*** Actions
    - x  :: Perform action
    - f/e :: Visit file
    - o :: Visit inn other window
    - v :: View file in view mode
    - k ::  Delete the entry lines in dired (don't delete files).
    - C :: copy file/files
    - D :: delete the specified files
    - R  :: Rename file/files
    - H :: hard link
    - S  :: symlink
    - M modespec :: Change permission
    - G group :: change group
    - O owner :: change owner
    - T :: touch / update timestamp
    - P  :: print
    - Z ::  compress/uncompress
    - c :: compress into archive
    - L :: Load elips file
    - B :: Byte compile file
    - A :: search files for regexp
    - Q ::  Search replace regexp on selected files
    - ! :: Shell command on selection
      - Example: ! tar cf foo.tar
    - & :: Async shell command
    - % u :: Rename to uppercase
    - % l :: Rename to lowercase
*** Apply Regexp operation
    - % R :: Regexp rename
    - % C :: Regexp copy
    - % H :: Regexp hardlink
    - % S :: Regexp sym link
    - % m ::  Mark files that meet regexp
    - % m REGEXP :: Mark those that meet regexp
    - % g regexp :: mark files that contain regexp
**** Example
     - ‘% R ^.*$ <RET> x-\& <RET>’ renames each selected file by
       prepending ‘x-’ to its name.
     - ‘% R ^x-\(.*\)$ <RET> \1 <RET>’ removes x- from name.

*** Crypto actions
    - :d  :: decrypt
    - :v :: Verify sig
    - :s :: Sign
    - :e :: Encrypt
*** Ledger
**** From keybindings
     - C-c           ::  Prefix Command
     - ESC           ::  Prefix Command
     - C-TAB         ::  ledger-post-align-xact
     - ::
     - M-n           ::  ledger-navigate-next-xact-or-directive
     - M-p           ::  ledger-navigate-prev-xact-or-directive
     - M-q           ::  ledger-post-align-dwim
     - ::
     - C-c C-a       ::  ledger-add-transaction
     - C-c C-b       ::  ledger-post-edit-amount
     - C-c C-c       ::  ledger-toggle-current
     - C-c C-d       ::  ledger-delete-current-transaction
     - C-c C-e       ::  ledger-toggle-current-transaction
     - C-c C-f       ::  ledger-occur
     - C-c TAB       ::  ledger-fully-complete-xact
     - C-c C-k       ::  ledger-copy-transaction-at-point
     - C-c C-l       ::  ledger-display-ledger-stats
     - C-c C-o       ::  Prefix Command
     - C-c C-p       ::  ledger-display-balance-at-point
     - C-c C-q       ::  ledger-post-align-xact
     - C-c C-r       ::  ledger-reconcile
     - C-c C-s       ::  ledger-sort-region
     - C-c C-t       ::  ledger-insert-effective-date
     - C-c C-u       ::  ledger-schedule-upcoming
     - ::
     - C-c C-o C-a   ::  ledger-report-redo
     - C-c C-o C-e   ::  ledger-report-edit-report
     - C-c C-o C-g   ::  ledger-report-goto
     - C-c C-o C-k   ::  ledger-report-quit
     - C-c C-o C-r   ::  ledger-report
     - C-c C-o C-s   ::  ledger-report-save
**** Entering transaction
     - C-c C-a starts a new transaction and brings up calendar.
       - To navigate the calendar use:
         - < / > :: previous/next month
         - Shift Up|Down|Left|Right arrow :: move cursor in calendar
           in that direction (forward/back one day or one week).
       - C-c C-c ::  to toggle cleared status
       - C-c C-f :: to enter narrow search.  C-c C-f to exit
       - C-c C-s :: sort region
**** Custom functions
     - copy a single transaction to kill ring
       - C-c M-w :: rjp/ledger-copy-trans
     - time order a transaction within the file
       - C-c C-m :: rjp/ledger-timeorder-xact (mnemonic m for move)
     - In narrow search mode, copy all visible
       - C-c C-w :: rjp/ledger-occur-copy-all
**** Reports
     - C-c  C-o C-r : Ledger report prompts for type of report
       bal|reg|payee|account
       - It brings up transactions that may not be in date order. To
         sort, hit the "e" key for edit.
       - e : allows editing of the command line arguments.
         - -C : for only cleared
         - -U : for only uncleared
         - --pedantic :
         - -S d : for sorting by date
**** Reconciling
     - C-c             Prefix Command
     - C-l             ledger-reconcile-refresh
     - RET             ledger-reconcile-visit
     - C-x             Prefix Command
     - ESC             Prefix Command
     - SPC             ledger-reconcile-toggle
     - a               ledger-reconcile-add
     - b               ledger-display-balance
     - d               ledger-reconcile-delete
     - g               ledger-reconcile
     - n               next-line
     - p               previous-line
     - q               ledger-reconcile-quit
     - s               ledger-reconcile-save
     - t               ledger-reconcile-change-target
     - <return>        ledger-reconcile-visit
     -
     - C-c C-a         sort by amount
     - C-c C-c         ledger-reconcile-finish
     - C-c C-d         sort by date
     - C-c C-o         default sort
     - C-c C-p         sort by payee
     -
     - C-x C-s         ledger-reconcile-save
     -

*** Calendar

    - C-@             calendar-set-mark
    - C-a             calendar-beginning-of-week
    - C-b             calendar-backward-day
    - C-c             Prefix Command
    - C-e             calendar-end-of-week
    - C-f             calendar-forward-day
    - C-n             calendar-forward-week
    - C-p             calendar-backward-week
    - C-v             calendar-scroll-left-three-months
    - C-x             Prefix Command
    - ESC             Prefix Command
    - SPC             scroll-other-window
    - -               negative-argument
    - .               calendar-goto-today
    - <               calendar-scroll-right
    - >               calendar-scroll-left
    - ?               calendar-goto-info-node
    - M-{             calendar previous month
    - M-}             calendar next month

* Org Mode
** Visibility
   - <TAB>              :: Show/hide
   - Shift + <TAB>      :: Global show/hide. With argument, up to
        level n.
   - C-u <TAB>          :: Global cycle Overview->Contents->Show All->Overview
   - C-c C-x v          ::  Copy visible text:  (org-copy-visible)
   - C-c <TAB>          :: Expose children of current subtree.  With argument,
                  to level n

** Motion
   - C-c C-n /n		:: Next visible heading
   - C-c C-p /p		:: Previous visible heading
   - C-c C-f /f		:: Next heading same level
   - C-c C-b /b		:: Previous heading same level
   - C-c C-j		:: Jump to any location (org-goto)

** Editing
   - M+Enter		:: Insert next heading at same level
   - C+Enter		:: Insert new heading after body of current
   - M + <L/R/U/D>	:: Promote/Demote/Up/Down current heading
   - M+S+<L/R/U/D>	:: Move subtree (Promote/Demote/Up/Down)
   - C-c C-x [C-w/M-W/C-y]	:: Kill/Copy/Yank Subtree
   - C-c *		:: Turn normal line or list into heading
   - C-c ; ::    Comment Heading
   - C-c - ::  Turn heading into normal list
   - Lists:
     - Unordered -, +, *
     - Ordered 1., 1).
       To start with a diferent value, start text with [@20]
     - Description, definition::  Extended description

** Todo
   - C-c C-t            :: Change Todo state
   - Shift+Left/Right   :: Change Todo state
   - C-c C-w  :: Refile

** Drawers
   - C-c C-x d		:: Insert active region in drawer

** Blocks
   Org mode uses begin..end blocks

*** Insertion using quick templates
    Type '<' followed by a template selector and <Tab>
    Template selector can be:
    - s                 :: #+BEGIN_SRC ... #+END_SRC
    - e			:: #+BEGIN_EXAMPLE ... #+END_EXAMPLE
    - q			:: #+BEGIN_QUOTE ... #+END_QUOTE
    - v			:: #+BEGIN_VERSE ... #+END_VERSE
    - c			:: #+BEGIN_CENTER ... #+END_CENTER
    - l			:: #+BEGIN_LaTeX ... #+END_LaTeX
    - L			:: #+LaTeX:
    - h			:: #+BEGIN_HTML ... #+END_HTML
    - H			:: #+HTML:
    - a			:: #+BEGIN_ASCII ... #+END_ASCII
    - A			:: #+ASCII:
    - i			:: #+INDEX: line
    - I			:: #+INCLUDE: line


*** Dynamic Blocks
    Specially marked regions that are updated by user-written function
    #+BEGIN: block-update-time: format "on %H:%M"
    #+END:
    - C-c C-x C-u       :: Update dynamic block at point
    - C-u C-c C-x C-u   :: Update all dynamic blocks


** Clocking
   C-c C-x C-j :: Jump to task being clocked.
** Tables
*** Creation and formatting
    - Line with |       :: Starts table if | is first non-whitespace character
    - Line with |-      :: Horizontal separator
    - <TAB>             :: Moves to the next field, realigns
    - S + <TAB>         :: Move to previous field, realign
    - Enter             :: Moves to next row, realigns
    - C-c C-c           :: Realign the table
    - <Number>          :: If a field contains <N>, N is width of col
*** Editing
    - M-<L/R/U/D>       :: Move col or row left,right,up,down
    - M-S-<L/U>         :: Kill current col/row
    - M-S-<R/D>         :: Insert new col/row
    - C-c -             :: Insert horiz line below cur row
    - C-c Enter         :: Insert horiz line below cur row and move cursor down
    - C-c `             :: Edit partially hidden cell
*** Copy/Paste
    - C-c C-x [M-w/C-w/C-y] :: Copy/Kill/Yank rectangular region of table
** Links
   - "[[link][desc]"	:: Create link
   - C-c C-l            :: Edit Link
   - "#local"           :: Local link type.  Without #, does a search
        for local
   - C-c C-o            :: Follow link

   - C-c & ::  Jump back to last bookmark

   - "<<link_target>>"  :: This is a link target

   - C-c l :: org-store-link.  copies the current link location (in
              any file, even non-org).  Then when doing C-c C-l
              (org-insert-link) using up-arrow will show the stored link

*** Custom links target
    - [[+TAB :: Bring up targets in local file
    - [[+ C-u - TAB :: Bring up targets in all include files

** Tags							:mytag:mytag2:mytag3:
   - ":tag1:tag2:"	:: Tags at the end of headlines
   - C-c C-q            :: Insert tag from anywhere in the section
   - C-c C-c            :: Insert tag when cursor on headline
   - C-c \              :: Create a sparse tree matching tags
   - C-c C-c, S+Tab     :: Exit sparse tree, then revert to normal tree.
*** Matching searches on tags
    [[http://orgmode.org/manual/Matching-tags-and-properties.html#Matching-tags-and-properties][Orgmode tag searching]]
*** Tag groups

** Properties and Columns
   :PROPERTIES:
   :COLUMNS: %8ITEM[Which] %Title[TITLE] %Artist[ARTIST]
   :Title:    my title
   :Artist: Some random artist
   :Value: 1
   :END:
   - ":prop1:"          :: Properties are like tags but with
        value. They are inserted into a special drawer.
   - ":prop2:"          :: Drawer is called "PROPERTIES". Each is on a
        single line.
   - ":prop3_ALL:"      :: Allowed values for a property
   - C-c C-x p          :: Set property
   - C-c C-c            :: Executes property commands
   - S-<L/R>            :: Previous/Next allowed property
   - C-c C-c c          :: Compute property at point
*** Columns
    - C-c C-x C-c       :: Turn on column mode
    - q                 :: Exit column view
    - C-c C-x i         :: Insert a dynamic block capturing column view
    - C-c C-c           :: Update dynamic block

** Beamer
*** Keystrokes
   - C-c C-e t		:: Insert default org export template
   - C-c C-b            :: Specify type of block
*** More info
    - [[https://github.com/matze/mtheme]] : Metropolis theme
    - [[https://hartwork.org/beamer-theme-matrix/]] : Beamer theme matrix
    - [[http://orgmode.org/worg/exporters/beamer/tutorial.html]] : Beamer tutorial


** Time Log
#+BEGIN_SRC emacs-lisp
    ;; Technique
    ;; org-map-entries
    ;; org-entry-properties with time argument.
    (org-entry-properties nil 'special "CLOCK") ;; This provides all time tags.
    ;; time tags are retrieved as an alist.
    ;;  however time ranges outside of clock only
    ;; map alist to a date or to a date range.
    ;; consolidate dates, and date ranges.
    ;; Date tree with link org-make-link-string
    ;;
    ;; org-entry-beginning-position
    ;; org-entry-end-position
    ;; org-scanner-tags
    ;; org-trust-scanner-tags t  locally
    ;; org-entry-properties with time argument.
    (org-entry-properties nil 'special "CLOCK") ;; This provides all time tags.
    ;; Regular expression search for clock
    ;; ^[ \t]*"  org-clock-string  "[ \t]*\\(?:\\(\\[.*?\\]\\)-+\\(\\[.*?\\]\\)
    ;; re-search-forward has an optional argument for limit to limit search.
    ;; Consolidate all time values into day, month, year.
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  ;; Just return a list of the following list
  ;; (formatted_heading date_list)
  (defun org-narrow-to-within-dblock ()
    "Narrow buffer to the current dblock."
    (org-beginning-of-dblock)
    (forward-line 1)
    (narrow-to-region (point) (point))
    )

  (defun org-heading-date-info ()
    ;;
    ;; Only return relevant headlines
    ;; Returns either nil or a list
    (let ((t_arr (make-vector 4 nil))
          (tstring ["TIMESTAMP" "DEADLINE" "SCHEDULED" "CLOCK"]))
      (dolist (entry ;; each entry in
                (org-entry-properties nil 'special "CLOCK") ;; list of timetags
                t_arr) ;; temporary var
        (let* ((propname (car entry))
               (pos (position propname tstring :test 'equal)))
          (if pos
              (aset t_arr pos (append (elt t_arr pos)
                                      (list (cdr entry))   ))
            )))
       ;; If any of the timestamps are present, return the headline and timestamps
       ;; else return nil
       (if (position nil t_arr :test-not 'equal)
           (cons (nth 4 (org-heading-components)) (copy-sequence t_arr) )
         nil)
       ))


  (defun org-test-datetree-insert(hding_daylist)
    (let* ((text (car hding_daylist))
           (days (cdr hding_daylist)))

      (mapc (lambda(day)
              (org-datetree-find-date-create
               (org-date-to-gregorian day) t)
              ;;(outline-next-heading)
              ;;(org-insert-item)
              ;;(insert text)
              (org-agenda-insert-diary-make-new-entry text)
              )
            days)) )

  (defun org-heading-date-format (heading_info)
    ;;  heading_info is a cons
    ;;  car: text of heading
    ;;  cdr: vector with time string for different time tags
    (let* ((heading (car heading_info))
           (formatted_heading (org-make-link-string (copy-sequence heading)))
           (ts (cdr heading_info))
           daylist )
      ;; ts is a vector. Each element is a list of strings or nil
      ;; map each list of strings to a date,
      ;; flatten vector
      ;; keep unique dates.
      (setq daylist
            (delq nil (delete-dups
                       (apply 'append
                              (mapcar
                               (lambda (tstr_list)
                                 (if tstr_list
                                     (mapcar
                                        (lambda (tstr)
                                          (org-time-string-to-absolute tstr))
                                      tstr_list)))
                               ts)))))
      (cons heading  daylist)))


  (defun org-dblock-write:myblock (params)
      "Get dates/time/clock and create a datetree"
      (let* ( (mappedvals (org-map-entries 'org-heading-date-info))
              (heading_info (remove nil mappedvals))
              (hding_daylists (mapcar 'org-heading-date-format  heading_info))    )


        (print "printing hding_daylists")
        (print hding_daylists)
        ;; Parse date strings
        ;; Format link string
        (save-restriction
          (org-narrow-to-within-dblock)
          (mapc 'org-test-datetree-insert hding_daylists)

          ;;(org-test-datetree-insert "text1")
          ;;(org-test-datetree-insert "text2")
          ;;(org-test-datetree-insert "text3")
          ;;(outline-next-heading)
          ;;(org-insert-heading nil t)
          ;;(org-do-demote)
          ;;(outline-next-heading)
          ;;;(org-insert-heading nil t)
          ;;(org-do-demote)
          ;;(org-agenda-insert-diary-make-new-entry "dummy text2")
          ;; remove extra new line added by previous command
          )
        )
      )
#+END_SRC
#+BEGIN: myblock

* Windows Shortcuts
  - Win + Tab		:: Aero Flip
  - Ctrl + Win + Tab	:: Aero Flip Hold.  Can release Ctrl+Win and
       can flip by just using tab.
  - Win + R		:: Run
  - Win + D		:: Minimize everything (show desktop)
  - Win + Pause/Break	:: Open CtrlPanel->System
  - Win + G		:: Show gadgets
  - Win + L		:: Lock computer
  - Win + Q		:: Communicator
  - Win + Home		:: Clear all but the active window
  - Win+Space		:: All windows become transparent so you can
       see through to the desktop
  - Win+Up arrow	:: Maximize the active window
  - Win+Down arrow	:: Minimize the window/Restore the window if it's maximized
  - Win+<arrow>		:: Dock the window to each side of the monitor
  - Win+S+<arrow>       :: Dock with dual monitors
  - Win+T		:: Focus and scroll through items on the taskbar.
  - Win+P		:: Adjust presentation settings for your display
  - Win+(+/-)		:: Zoom in/out
  - S+Click taskbar item:: Open a new instance of that application
  - Win+ (1-9)          :: application pinned to the taskbar in that position
  - S+Win+ (1-9)        :: New instance of the application pinned to the taskbar
  - Ctrl+Win+ ( 1-9)	:: Cycles through open windows for the application
  - Alt+Win+(1-9)	:: Opens the Jump List for the application
       pinned to the taskbar.
  - Win+T		:: Focus and scroll through items on the taskbar.
  - Win+B               :: Focuses the System Tray icons
  - Ctrl+S+Esc          :: Task Manager

* MS Word Outline mode
  - Alt+Shift+[L/R]Arrow     :: Promote/Demote paragraph
  - Ctrl+Shift+N             ::  Demote to body text
  - Alt+Shift+[Up/Dn]Arrow   :: Move paragraphs [Up/Dn]
  - Alt+Shift+[plus/minus]   :: Expand/Collapse text under heading
  - Alt+Shift+A              :: Expand/Collapse all text and headings
  - Alt+Shift+n              :: Show all headings up to Heading n
* MS Excel
** Keys
   - Preferences :: To change between column numbering as alphabets/numbers
   - Ctrl-D :: Auto-fill a selection based on first
   - Ctrl'` :: Toggle display between formulas and values
   - F4 :: Within formula switch reference between absolute and relative
** Entering data
   - Instead of entering data horizontally.  "Enter" + right arrow +
     up arrow.  Select the horizontal cells first.
** Selection
   - Cmd-A :: Selects range island (range surrounded by white space)
** Formatting
   - Use painter and auto-fill rectangle to extend formatting
** Naming cells, rows, columns
   - Can just click in menubar item showing row+Col with a name to
     define new name for that cell.
   - Can select a whole row or column and give it a name.
     - Can use row/col names in formulas to make them more descriptive.
   - Can use arrow keys on menubar item with cell name to see existing names.
** Index and match
   - match( ) returns index
     - Example: can find find an item from current table in different
       table. i.e. lookup.
   - use index to get something from different column.
** Table ranges
   Even though all of excel is a table, select a range and insert
   table.  This tracks that range as being a table.  A header may be
   added. A footer may be added.  From last row/col element, Tab will
   insert a new row with formatting properly fixed.
   Not only that formulas in one table can refer to a column in
   different table by just name.
** Auto solve
   Goal seek. Provide desired value for one cell and tell the dialog
   box which cell is to be changed.  Excel will iterate.
** Pivot table
   Works well with defined tables.   Allows slicing data based on
   values in another table.

* Outlook
  - Ctrl+Shift+I	:: Inbox
  - Alt+S               :: Send
  - Ctrl+R              :: Reply
  - Ctrl+Shift+R        :: Reply All
  - Ctrl+F              :: Forward
  - Ctrl+Shift+V        :: Move to Folder
  - Ctrl+N              :: New Message
  - Ctrl+O              :: Open message
  - Ctrl + ./,          :: Next/ Prev Message
  - Ctrl+1              :: Go to mail
  - Ctrl + 2            :: Go to calendar
  - Ctrl + 6            :: Folder List
  - Ctrl + Y            :: Go to different folder
  - Alt+J               :: Move to Subject field

* Explorer
  - Ctrl+N              :: New Window
  - Ctrl+W              :: Close window
  - Ctrl+S+N            :: New folder
  - Ctrl + .            :: Rotate picture clockwise
  - Ctrl + ,            :: Rotate picture counter-clockwise
  - Left Arrow          :: Collapse selection
  - Alt+Enter           :: Properties
  - Alt+P               :: Display Preview pane
  - Alt+Left Arrow      :: Visit previous folder
  - Backspace           :: View previous folder
  - Alt+Up arrow	:: Parent folder
  - Alt+D               ::  Select address bar
  - Ctrl+E              :: Select search box
  - Ctrl+F              :: Select search box

* Git
  - git ls-files :: list files in git repo
** Bundles
   Check log and create bundle using
   #+BEGIN_EXAMPLE
   git log master ^da88da
   git bundle create commits.bundle master ^da88da
   #+END_EXAMPLE
   On the other side,
   #+BEGIN_EXAMPLE
   git bundle verify ./commits.bundle
   git bundle list-heads ../commits.bundle  # To list branches
   git fetch ../commits.bundle master:other-master  # Fetch master from bundle into our branch
   #+END_EXAMPLE
** Merging one repo as a subdirectory of another
   [[https://gist.github.com/smdabdoub/17065c348289158277b5][git subtree merge]]
   [[https://mirrors.edge.kernel.org/pub/software/scm/git/docs/howto/using-merge-subtree.html][Git reference for subtree]]
   [[https://stackoverflow.com/questions/6426247/merge-git-repository-in-subdirectory][More git subtree merge]]
   - Maybe good to first move files in new repo to a subdirectory.
   - Then subtree merge
** LFS
   - STart with using "git lfs install" in the repo
   - git lfs track and untrack only edit the .gitattributes, so best
     to do that manually
   - git lfs fetch, git lfs checkout for populating files

* SVN
** Sparse checkout
   See [[https://stackoverflow.com/questions/50945/can-you-do-a-partial-checkout-with-subversion][SVN sparse checkout]]
   #+begin_example
     svn checkout --depth empty http://svnserver/trunk/proj
     svn update --set-depth infinity proj/foo
     svn update --set-depth infinity proj/bar
     svn update --set-depth infinity proj/baz
   #+end_example
* i3 Shortcuts
  Mod1 = Alt, Mod4 = Win
  - Mod+Enter :: start a new terminal
  - Mod+Shift+Q :: Kill
  - Mod+d :: dmenu
  - Mod+L/R/U/D :: Switch focus
  - Mod+Shift+L/R/U/D :: Move focused window
  - Mod+h :: Horizontal split mode
  - Mod+v :: Viertical split mode
  - Mod+f :: Full screen for focused container
  - Mod+s :: Stacking mode
  - Mod+w :: Tabbed mode
  - Mod+e :: Default mode
  - Mod+[1:0] :: Switch workspace 1:10
  - Mod+Shift+[1:0] :: Move container to workspace
  - Mod+Shift+R :: restart
  - Mod+Shift+E :: exit
  - Mod+r :: resize mode
  - Esc/Enter :: Exit resize mode

* Cygwin
** Directory permissions
   To fix type  "setfacl -b"
** X11
*** Running
    To run each X app on its own.
    - 1. Start X server:  X -multiwindow
    - 2. export display: export DISPLAY=:0.0
    - 3. start application
    - OR  try
      - xwin -multiwindow &  (Verified Mar 3, 2015)
    - Common mistakes:  Check for colon in DISPLAY variable
*** Problems with windows and Virtual Desktop
    This can be done by clicking with the middle mouse button on the
    title bar of an Cygwin X Windows window, such as an xterm, and
    select "Add Window Rule". In the dialog near bottom there is
    "Method for hiding the window", change it to "Hide by move
    window". Do not forget to press "Add" and "Apply" buttons
    afterwards.
    [[https://cygwin.com/ml/cygwin-xfree/2013-05/msg00012.html]]
* Unix tools
** sed
   To delete a line in file and pipe output.
   find . -name "*.v" | xargs cat | sed -e '/^$/ d' -e '/^\/\// d' | wc -l
   cat *.vhd | sed -e '/^$/ d' -e '/^--/ d' | wc -l
** pdftopnm
   convert pdf to different outputs
   #+begin_example
     pdftoppm -[png|jpeg|tiff] -f firstpage -l lastpage  pdffile.pdf  outfileprefix
   #+end_example
* Typesetting
  - http://www.cs.sfu.ca/~ggbaker/reference/characters/#dash
  - http://practicaltypography.com/body-text.html
  - [[https://olivierpieters.be/blog/2017/02/11/designing-a-business-card-in-latex][Business card in latex]]
* GPG
  1. Key generation
     #+BEGIN_SRC
     gpg --gen-key
     #+END_SRC
  2. Share public key
     #+BEGIN_SRC
     gpg --armor --output pubkey.txt --export 'Your Name'
     #+END_SRC
  3. Import other public key
     #+BEGIN_SRC
     gpg --import key.asc
     #+END_SRC
  4. Encrypt
     #+BEGIN_SRC
     # the long version
     gpg --encrypt --recipient 'recipient_id' foo.txt

     # using terse options
     gpg -e -r Name foo.txt
     #+END_SRC
  5. Decrypt
     #+BEGIN_SRC
     gpg --output foo.txt --decrypt foo.txt.gpg
     #+END_SRC
  6. Key list check
     #+BEGIN_SRC
     gpg --list-keys
     gpg --delete-key 'myfriend@his.isp.com'
     #+END_SRC
* GNU Screen
** Overview
   Screen has windows and regions.
   - Regions are rectangular areas on the screen
   - Windows are individual screen sessions.

** Command line options
   - -d pid :: Detach running screen session
   - -ls  :: List session ids
   - -L :: turn on output logging
   - -r  :: resume detached session
   - -R  :: resume (if only one session) or list available sessions
   - -S sessionmae :: session name
   - -t title  ::


** Basic keys
  - C-a :: Default escape
  - C-a c :: Create new screen
  - C-a ?:: Help
  - C-a : :: (Colon) Enter configuration command
  - C-a a ::  Send C-a to window
  - C-a A :: Enter title for wndow
  - C-a C :: Clear screen
  - C-a d :: Detach
  - C-a h :: Hardcopy/snapshot to file
  - C-a H ::  Toggle logging
  - C-a \ :: Quit, kill all windows.
  - C-a Q :: Delete all regions, except current.
  - C-a q ::  Send Ctrl-q to current window
  - C-a [ :: Enter copy/scrollback mode
  - C-a ] :: Paste
** Hardcopy/logging
   - hardcopy -h filename : write contents of current buffer with scrollback


** Window selection
  - C-a C-a :: toggle between screens/windows
  - C-a ' :: Prompt for window identifier and switch
  - C-a w :: List active windows
  - C-a " :: List of all windows to switch
  - C-a n, C-a SPC :: Next window
  - C-a p :: Previous window
** Window groups
** REgion
   - C-a Tab :: Focus next region
   - C-a F :: Resize window to current region
   - C-a | :: split verrtical
   - C-a X :: kill current region
** Layout
   Layout is a configuration for the breakup of regions
* Video edit
  * Merge videos in ffmpeg
    #+begin_src
    ffmpeg.exe -f concat -safe 0 -i ./filelist.txt -c copy output.mp4
    #+end_src
    where filelist.txt contains text such as
    #+begin_src
    file ./file1.mp4
    file ./file2.mp4
    #+end_src
    created using something like
    #+begin_src
    for f in *.MP4; do echo "file ./$f" >> filelist.txt; done
    #+end_src
* Misc
** Bootcamp can break powerpoint
** Excel
*** Hide zero values in cells
    Cells
    Excel

    Follow this procedure to hide zero values in selected cells. If the
    value in one of these cells changes to a nonzero value, the format
    of the value will be similar to the general number format.

    1. Select the cells that contain the zero (0) values that you want to hide.
    2. On the Format menu, click Cells, and then click the Number tab.
    3. In the Category list, click Custom.
    4. In the Type box, type 0;-0;;@
** Source highlight
   To highlight source code:
*** Use  Highlight Code Converter:
    1. Paste into Code-Converter.
    2. Select Syntax
    3. Select Color theme (example edit-eclipse).
       Good options: earendel, edit-emacs, edit-gedit, nuvola
    4. Copy preview to clipboard
    5. Paste into Wordpad
    6. Copy from Wordpad
    7. Paste into powerpoint: Don't use Paste, Don't use Paste Special.
    8. Right click on slide:  Under context menu, Paste there are four icon options:
      1) Use Destination Theme
      2) Use Source formatting
      3) As Picture
      4) Keep Text Only
      Select "Use Source Formatting".

*** If GUI is not working then
    highlight.exe -S spn --style=earendel -O rtf -i inputfile.pml -o outputfile.rtf
    Then open in Wordpad and copy as above.

*** Use Source-highlight
    source-highlight -i inputfile.pml -o outputfile.html
    Open in Word.
    Copy to powerpoint.

*** Use emacs
    M-x htmlfontify-buffer
    Then write to html file
    Open in word or copy into word
    Then copy into powerpoint.



** Cygwin, Windows7 Quirkiness
*** Virtualstore
    This is a feature of Windows Vista designed to ensure that old
    applications that assume that they can write to LOCAL_MACHINE
    still work.  These writes are redirected to
    AppData/Local/VirtualStore.

    With Cygwin32, when you write files in directories that are not
    permissible, or create symlinks, they actually go into
    VirtualStore.  With Cygwin64, this is not the case.
** TCL
   to unload autoloaded files type command "auto_reset" at
   interpreter.
   package forget xxx
** Windows port forwarding
   #+BEGIN_EXAMPLE
   netsh interface portproxy add v4tov4 listenport=4422 listenaddress=192.168.1.111 connectport=80 connectaddress=192.168.0.33
   #+END_EXAMPLE
** VirtualBox port forwarding
   For accessing daemons running on virtual box do the following:
   1. Within VirtualBox
      1. Setup daemons within virtual box.
      2. In /etc/hosts alias the name of the host machine as seen on
         the network.
   2. VirtualBox Setting
      1. In Network Settings, Port Forwarding, setup all necessary
         port forwards.
   3. Remember to change any necessary environment variables to point
      at new location
* Doors
  - Ctrl+N :: addsa new object above
  - Ctrl+L :: addsa  new object below
  - Ctrl+H :: creates a heading object
  - Ctrl+Enter :: fcreate a same object at the same level while editing.
  - Ctrl+A :: navigate to next editable column
  - Return :: Move to next ojbect for that enumerated attribute
  - Shift+Enter :: Move to the next object for non-enumerated attributes
* Latex/luatex
  - Passing arguments with underscore into functions will not print
    correctly.  To allow functions to handle them, within the
    function, encapsulate argument in \detokenize{ }
* To wipe free space in windows
  To wipe free space on C drive
  #+BEGIN_EXAMPLE
  cipher /w:C
  #+END_EXAMPLE
* Linux
** Adding virtual interface
*** Creating interface
    Create file such as /etc/modprobe.d/dummy.conf, with contents
    #+BEGIN_EXAMPLE
    install dummy /sbin/modprobe --ignore-install dummy; /sbin/ip link set name eth2 dev dummy0 ; /sbin/ifconfig eth2 up; chmod 750 /sys/devices/virtual/net
    #+END_EXAMPLE
    This does the following:
    1. Loads dummy module.
    2. Sets name of interface.
    3. Enables interface.
    4. Some apps may fail with a dummy interface. This makes it look
       like a real interface.
*** Set interface parameters
    In file such as /etc/sysconfig/network-scripts/ifcfg-eth2 where eth2 is
    name of interface, set parameters.
    #+BEGIN_EXAMPLE
      NAME=eth2
      DEVICE=eth2
      ONBOOT=yes
      MACADDR=5C:FE:10:01:0B:35
      USERCTL=no
      BOOTPROTO=static
      NETMASK=255.255.255.0
      IPADDR=172.16.15.4
      PEERDNS=no
      TYPE=Ethernet

      check_link_down() {
       return 1;
      }
    #+END_EXAMPLE
** Systemctl
   - systemctl start unitname
   - systemctl stop unitname
   - systemctl enable file.service  to setup a file.


** CA certificates
   - Add .crt file to /usr/local/share/certificates
   - Run update-ca-certificates
** Minimal Debian Install
*** wajig
*** less
*** i3
    i3, i3status, suckless-tools
*** openssh-client
*** rxvt-unicode font xft:Inconsolata
*** xorg
*** fonts-inconsolata
*** fontconfig
*** git
*** libc-i386
*** ia32-libs
    First requires multiarch install
    dpkg --add-architecture i386
*** lsb
    Try lsb-core
