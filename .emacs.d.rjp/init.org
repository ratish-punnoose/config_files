#+TITLE: Ratish Punnoose's Emacs configuration
#+STARTUP: indent
#+STARTUP: hidestars
#+PROPERTY: header-args :tangle yes
* Introduction
Originally inspired by Sasha Chua's org mode base emacs configuration
using org-babel. For years, I used, the the starter kit by Eric
Schulte [[http://eschulte.github.io/emacs24-starter-kit/][Emacs24 starter kit]]. Now this is a custom configuration.
* Pre-setup before loading packages
1. Add a comment for package-initialize.  Emacs may add this
   automatically if such a comment is not seen.
   #+begin_src  emacs-lisp
   ;; (package-initialize)
   #+end_src
2. Increase the GC
   #+begin_src emacs-lisp
     (setq gc-cons-threshold (* 40 1000 1000 ))
     (setq gc-cons-percentage 1.0)
   #+end_src
3. Set load path two
   1. Setup function
      #+begin_src emacs-lisp
        (setq load-path
              (append load-path
                      (eval-when-compile
                        (require 'seq)
                        (defun rjp/get-dir-and-subdirs (dirname)
                          "Provide list of directory and its direct subdirectories."
                          (if (file-accessible-directory-p dirname)
                              (append (list dirname) (seq-filter  'file-directory-p
                                                                  (nthcdr 2 ;; Remove ".", ".."
                                                                          (directory-files dirname t))))
                            nil))
                        (append
                         (rjp/get-dir-and-subdirs
                          (expand-file-name "elpa/" user-emacs-directory))
                         (rjp/get-dir-and-subdirs
                          (expand-file-name "lisp/" user-emacs-directory))))))

      #+end_src

      #+begin_src emacs-lisp :tangle no
        (require 'seq)
        (defun rjp/get-dir-and-subdirs (dirname)
          "Provide list of directory and its direct subdirectories."
          (interactive)
          (if (file-accessible-directory-p dirname)
              (append (list dirname) (seq-filter  'file-directory-p
                                                  (nthcdr 2 ;; Remove ".", ".."
                                                          (directory-files dirname t))))
            nil))
      #+end_src
   2. Add to path
      #+begin_src  emacs-lisp :tangle no
        (setq load-path (append load-path
                                (rjp/get-dir-and-subdirs
                                 (expand-file-name "elpa/" user-emacs-directory))
                                (rjp/get-dir-and-subdirs
                                 (expand-file-name "lisp/" user-emacs-directory))
                                ))
      #+end_src
4. Setup up package reppos for melpa
   #+begin_src emacs-lisp
     (setq package-archives
           '(("gnu" . "https://elpa.gnu.org/packages/")
             ("melpa" . "http://melpa.milkbox.net/packages/")))

   #+end_src

5. Setup up intitial packages
   #+begin_src emacs-lisp :tangle no
     (require 'package)
     (add-to-list
      'package-archives
      ;; '("melpa" . "http://stable.melpa.org/packages/") ; many packages won't show if using stable
      '("melpa" . "http://melpa.milkbox.net/packages/")
      t)
     (unless (boundp 'rjp/emacs-in-update)
       (setq package-load-list
             '(
               (cl t)
               (cl-lib t)
               (uniquify t)
               ;;(require 'ansi-color)
               (recentf t)
               ;;(auctex  t)
               ;;(company-anaconda t)
               ;;(anaconda-mode t)
               ;;(company t)
               ;;(esup t)
               ;;(flycheck t)
               ;;(helm-ag t)
               ;;(helm-gtags t)
               ;;(helm-projectile t)
               ;;(helm t)
               ;;(helm-core t)
               ;;(indent-guide t)
               ;; (magit t)
               ;; (git-commit t)
               ;; (magit-popup t)
               ;;(popup t)
               ;;(projectile t)
               ;;(pkg-info t)
               ;;(epl t)
               ;;            (pythonic t)
               (dash t)
               (s t)
               (f t)
               ;;(rainbow-delimiters t)
                                             ;(use-package t)
               ;;(diminish t)
               ;;(bind-key t)
               ;;(with-editor t)
               (async t)
               ;;(ffap t)
               ;;(saveplace t)
               ;;(ansi-color t)
                                             ;all
               )))

     (package-initialize)
   #+end_src

6. Prevent packages from being loaded twice
   #+begin_src emacs-lisp :tangle yes
     (unless (boundp 'rjp/emacs-in-update)
                     (setq package-enable-at-startup nil))
   #+end_src


* Package Management
use-package is needed to load packages but not needed at run time.
   #+begin_src emacs-lisp
   (eval-when-compile (require 'use-package))
   (require 'diminish)
   (require 'bind-key)
   #+end_src



* Global Non-UI Options
#+BEGIN_SRC emacs-lisp
;; Reload files automatically
(global-auto-revert-mode 1)

;; Use electric buffers
(global-set-key "\C-x\C-b" 'electric-buffer-list)

(define-key global-map "\M-g" 'goto-line)

#+END_SRC
** Recent files
#+BEGIN_SRC emacs-lisp
(use-package recentf
:config
(recentf-mode 1))
#+END_SRC


** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Highlight matching parentheses when the point is on them.
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

** UTF encoding
#+begin_src emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

** Change Yes/No to y/n
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Appearance and UI
** Font
Set default font to Consolas.  This is done using
Options-> Save Options.
#+begin_src emacs-lisp
  ;;(set-default-font "-outline-Consolas-normal-normal-normal-mono-*-*-*-*-c-*-iso8859-1")
  (cond ((or (eq system-type 'windows-nt)
             (eq system-type 'cygwin))
         (custom-set-faces
          ;; custom-set-faces was added by Custom.
          ;; If you edit it by hand, you could mess it up, so be careful.
          ;; Your init file should contain only one such instance.
          ;; If there is more than one, they won't work right.
          '(default ((t (:family "Consolas" :foundry "outline" :slant normal
                                   :weight normal :height 113 :width normal))))))
        ((eq system-type 'gnu/linux)
         (custom-set-faces
          ;; custom-set-faces was added by Custom.
          ;; If you edit it by hand, you could mess it up, so be careful.
          ;; Your init file should contain only one such instance.
          ;; If there is more than one, they won't work right.
          '(default ((t (:family "Source Code Variable" :foundry "adobe" :slant normal
                                 :weight normal :height 130 :width normal))))
            ;'(default ((t (:family "Inconsolata" :foundry "outline" :slant normal
                                          ;                      :weight normal :height 113 :width normal))))

          )))
  (global-font-lock-mode t)
#+end_src

*** Unicode symbol fallback

Normally, if the primary font does not have a unicode code point that
character will not be displayed.  This provides a fallback font to use
for such symbols.  The font Symbola is chosen.
Specifically, a modified version of Symbola with fixed with matched to the width of a Consolas character is used.
See: [[https://github.com/cpitclaudel/monospacifier]] and
 [[https://graphicdesign.stackexchange.com/questions/10644/how-can-i-make-a-font-monospaced]].

#+begin_src emacs-lisp
  (cond ((or (eq system-type 'windows-nt)
             (eq system-type 'cygwin))
         (dolist (ft (fontset-list))
           (set-fontset-font ft 'unicode
                             (font-spec
                              :name "Consolas"))
           (set-fontset-font ft 'unicode
                             (font-spec
                              :name "Symbola monospacified for Consolas") nil 'append))))
#+end_src
** Zoom
#+begin_src emacs-lisp
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src

** Window appearance
*** Colors
#+begin_src emacs-lisp
(setq default-frame-alist
      '((minibuffer . 1)
         (menu-bar-lines . 1)
         (cursor-color .  "cyan")
         (foreground-color . "grey" )
         (background-color . "black")
         (mouse-color . "yellow" )))
#+end_src
*** Color themes
To use a color theme. Use load-library and then color-theme.
Suitable color themes are aalto-dark, aalto-light,
color-theme-alice-blue, color-theme-andreas
*** Disable toolbar
#+begin_src emacs-lisp
(if window-system
    (tool-bar-mode -1)
)
#+end_src
*** Disable menu
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  ;(global-set-key [f1] 'menu-bar-mode)
#+end_src
*** Title and Status [[http://mnemonikk.org/][mnemonikk]]
#+begin_src emacs-lisp
(setq frame-title-format
      '(buffer-file-name "%f"
                                 (dired-directory dired-directory "%b")))
(setq-default mode-line-buffer-identification
              (cons
               '(:eval (replace-regexp-in-string "^.*/\\(.*\\)/" "\\1/" default-directory))
               mode-line-buffer-identification))
(display-time)
(setq display-time-day-and-date t)
(setq line-number-mode t)
(setq column-number-mode t)
(setq next-line-add-newlines nil)
(setq blink-matching-paren t)
#+end_src
*** Blink cursor
#+begin_src emacs-lisp
(blink-cursor-mode -1)
#+end_src
*** Mouse wheel
#+begin_src emacs-lisp
  (use-package mwheel
    :defer 5
    :if window-system
    :config
    (mouse-wheel-mode t))
#+end_src
*** Miscellaneous UI
#+begin_src emacs-lisp
  (setq visible-bell t
        echo-keystrokes 0.1
        font-lock-maximum-decoration t
        inhibit-startup-message t
        transient-mark-mode t
        color-theme-is-global t
        delete-by-moving-to-trash t
        shift-select-mode nil
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab)
        whitespace-line-column 100
        ediff-window-setup-function 'ediff-setup-windows-plain
        xterm-mouse-mode t)
#+end_src

** Scroll Bars
   Add scroll bars
#+begin_src emacs-lisp
;;(setq scroll-bar-mode 1)
;;(toggle-scroll-bar)
#+end_src

** HideShow
;; Invoke HideShow mode with M-x hs-minor-mode.
;; For Emacs 20:
;;    * C-c S show all
;;    * C-c H hide all
;;    * C-c s show block
;;    * C-c h hide block
;;
;; For Emacs 21:
;;
;;    * C-c @ ESC C-s show all
;;    * C-c @ ESC C-h hide all
;;    * C-c @ C-s show block
;;    * C-c @ C-h hide block
;;    * C-c @ C-c toggle hide/show
;; http://www.emacswiki.org/cgi-bin/wiki/HideShow
;;http://www.gnu.org/software/emacs/manual/html_node/Hideshow.html#Hideshow
#+BEGIN_SRC emacs-lisp
  (setq hs-hide-comments-when-hiding-all t)

  ;; Add Promela
  ;;(add-to-list 'hs-special-modes-alist '(promela-mode "{" "}" "/[*/]" nil nil))

  ;;  Toggle hide/show for a specific block
  (global-set-key (kbd "C-,") 'hs-toggle-hiding)

  ;; Global toggle
  (defvar rjp/hs-status nil "Current state of hideshow")
  (defun rjp/toggle-hs-all() "Toggle hideshow all."
    (interactive)
    (setq rjp/hs-status (not rjp/hs-status))
    (if rjp/hs-status (hs-hide-all) (hs-show-all)))
  (global-set-key (kbd "C-M-,") 'rjp/toggle-hs-all)

  ;; Startup in hs-minor-mode with all hidden
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (add-hook 'hs-minor-mode-hook #'hs-hide-all)
#+END_SRC

** Indent guide
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
               :defer 5
               :config
               (indent-guide-global-mode)
               (setq indent-guide-delay 0.5)
               (setq indent-guide-recursive t))
#+END_SRC

** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
                   :defer 4
                   :config
                   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Trailing Whitespace
#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC
** Uniquify buffers
#+begin_src emacs-lisp
(use-package uniquify :defer 4)
#+end_src
* Navigation
Easier keys for switching windows

** For moving to next/previous window
#+begin_src emacs-lisp :tangle no
(defun select-next-window ()
  "Switch to the next window"
  (interactive)
  (select-window (next-window)))

(defun select-previous-window ()
  "Switch to the previous window"
  (interactive)
  (select-window (previous-window)))

(global-set-key (kbd "M-n") 'select-next-window)
(global-set-key (kbd "M-p")  'select-previous-window)


#+end_src
** For moving using arrows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<left>") 'windmove-left)          ; move to left windnow
(global-set-key (kbd "C-<right>") 'windmove-right)        ; move to right window
(global-set-key (kbd "C-<up>") 'windmove-up)              ; move to upper window
(global-set-key (kbd "C-<down>") 'windmove-down)          ; move to downer window
#+END_SRC
* Search at Point
To use this, start search with C-s and then type C-*.
Note: find-tag-default-as-regexp and find-tag-default-as-symbol-regexp
are useful here.
#+BEGIN_SRC emacs-lisp
(defun isearch-yank-symbol ()
  "*Put symbol at current point into search string."
  (interactive)
  (let ((sym (symbol-at-point)))
    (if sym
        (progn
          (setq isearch-regexp t
                isearch-string (find-tag-default-as-regexp)
                isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
                isearch-yank-flag t))
      (ding)))
  (isearch-search-and-update))
;;(define-key isearch-mode-map (kbd "C-*") 'isearch-yank-symbol)
(define-key isearch-mode-map [(down)] 'isearch-yank-symbol)
#+END_SRC
* Copy word at point
#+BEGIN_SRC emacs-lisp
  (defun rjp/copy-word-at-point ()
      "Copy word at point with underscores."
      (interactive)
      (kill-new (thing-at-point 'symbol) ))
  (define-key global-map (kbd "\C-xw") 'rjp/copy-word-at-point)
#+END_SRC
* Tags
#+BEGIN_SRC emacs-lisp :tangle no
;; Tags search
(global-set-key "\C-t" 'tags-search)
#+END_SRC
* Org-mode
** Setup before loading org
Loading it in this file does not work since org has to be started to
evaluate this file itself.
** org speed keys
When cursor is at the beginning of a headline, speed commands can be used. Here are some of the useful ones:
- ? :: Help
- n :: Next heading
- p :: Previous heading
- f :: Next heading same level
- b :: Previous heading same level
- j :: goto
- c  :: cycle
- k :: Cut subtree
- = :: Turn on column view
- # :: Toggle comment
- ^ :: sort

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src
** Tab in code block
#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src
** Org global configuration and shortcuts
#+begin_src emacs-lisp
;;(set-time-zone-rule "GMT+8")
;;(set-time-zone-rule "PST")
(setq org-directory "~/org")


(global-set-key "\C-cl" 'org-store-link)
;; Use C-c C-l to insert link
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(setq org-hide-leading-stars t)

#+end_src
** Org capture
#+begin_src emacs-lisp :tangle yes
(setq  org-agenda-files (quote ("~/org/jnl.org")))
(setq  org-refile-targets '((org-agenda-files  :maxlevel . 3)))
(setq org-default-notes-file (concat org-directory "/jnl.org"))
(setq org-log-done 'time) ;; Record time of task completion
(setq org-clock-into-drawer 1)
;; (setq org-log-done 'note) ;; Record time+note of task completion

;; C-c c     (org-capture) Call the command org-capture
;; C-c C-c     (org-capture-finalize)
;;      Once you have finished entering information into the capture buffer,
;; C-c C-w (refile)
;; C-c C-k abort capture
;; C-u C-c c visit target of capture template
;; C-u C-u C-c c Visit last stored capture item in its buffer
;; C-0 + C-c c  capture at point in an org buffer
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/jnl.org" "Todolist")
             "* TODO %?\n  %iAdded: %U")
              ("d" "Date" entry (file+datetree+prompt "~/org/jnl.org")
             "* %?")
        ("j" "Journal" entry (file+datetree "~/org/jnl.org")
             "* %?\nAdded: %U\n  %i")
              ("n" "NowAction" entry (file+datetree "~/org/jnl.org")
             "* %?" :clock-in t :clock-resume t)))

;; To define special keys to capture to a particular template without going through the interactive template selection, you can create your key binding like this:

(define-key global-map "\C-ct"
      (lambda () (interactive) (org-capture nil "t")))

#+end_src
Also log into drawer
#+BEGIN_SRC emacs-lisp
(set 'org-log-into-drawer t)
#+END_SRC
** Org beamer
*** Emphasis lists are set before org is loaded. Currently this is set in [[file:init.el::(setq%20org-emphasis-alist][init.el]].
Note in init.el by self describes that it is not used by beamer
anymore.  Don't remember details.
#+begin_src emacs-lisp :tangle no
  (setq org-emphasis-alist
        (quote (("*" bold "<b>" "</b>")
                ("/" italic "<i>" "</i>")
                ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                ("=" org-code "<code>" "</code>" verbatim)
                ("~" org-verbatim "<code>" "</code>" verbatim)
                ("+" (:strike-through t) "<del>" "</del>")
                ("@" org-warning "<b>" "</b>")))
        org-export-latex-emphasis-alist
        (quote (("*" "\\textbf{%s}" nil)
                ("/" "\\emph{%s}" nil)
                ("_" "\\underline{%s}" nil)
                ("+" "\\texttt{%s}" nil)
                ("=" "\\verb=%s=" nil)
                ("~" "\\verb~%s~" t)
                ("@" "\\alert{%s}" nil)))
        )

#+end_src
*** Set code export to minted
latex  is part of the default export backend. Toc ustomize.
Wait until ox-latex is loaded and then modify the custom vars.
#+begin_src emacs-lisp
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("fontsize" "\\scriptsize")
          ("linenos" "")))
  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-packages-alist '("" "minted"))
      ;; Add language alias
    (add-to-list 'org-latex-minted-langs '(verilog "v")))
#+end_src


#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ox-latex
    :defer 10
    :config
    (setq org-latex-listings 'minted)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-minted-options
             '(("frame" "lines")
               ("fontsize" "\\scriptsize")
               ("linenos" "")))
    ;; Add language alias
    (add-to-list 'org-latex-minted-langs '(verilog "v"))      )
#+END_SRC

** Org diff
My customization to allow folding and unfolding
#+BEGIN_SRC emacs-lisp
  ;; diff hooks for org mode
  (add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
  (add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
  ;; Check for org mode and existence of buffer
  (defun f-ediff-org-showhide(buf command &rest cmdargs)
    "If buffer exists and is orgmode then execute command"
    (if buf
        (if (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
            (save-excursion (set-buffer buf) (apply command cmdargs)))
      )
    )

  (defun f-ediff-org-unfold-tree-element ()
    "Unfold tree at diff location"
    (f-ediff-org-showhide ediff-buffer-A 'org-reveal)
    (f-ediff-org-showhide ediff-buffer-B 'org-reveal)
    (f-ediff-org-showhide ediff-buffer-C 'org-reveal)
    )
  ;;
  (defun f-ediff-org-fold-tree ()
    "Fold tree back to top level"
    (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)
    (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)
    (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1)
    )
#+END_SRC

** Export drawers with latex
Export org-drawers with latex enclosed in a \drawername{contents}
format.
#+BEGIN_SRC emacs-lisp
    (defun rjp/chomp (str)
          "Chomp leading and tailing whitespace from STR."
          (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'"
                               str)
            (setq str (replace-match "" t t str)))
          str)
    ;;
    (defun rjp/org-latex-drawer-format (name contents)
      "Create a customized latex drawer export"
      (format "\n\\%s{%s}\n" name (rjp/chomp contents) )
    )
    ;;
    (custom-set-variables
     '(org-latex-format-drawer-function
       (quote rjp/org-latex-drawer-format))       )
    ;;
#+END_SRC
** Epresent
#+begin_src emacs-lisp
   (defun rjp/epresentfix ()
     "Fix some epresent settings "
     (interactive)
     (setq epresent-page-number 1)
     (rjp/set-line-spacing 0.25)
     )
   (use-package epresent
     :after (org)
     :custom
     (epresent-start-presentation-hook #'rjp/epresentfix)
   )

#+end_src
** List of targets
Can use org-all-targets *Automatically added by starter kit.
- Use org-in-regexp
- org-bracket-link-regexp
- Option for using prefix C-u - Tab to send a prefix arg to the
  following function since in org-cycle,
  run-hook-with-args-until-success is not passed the arguments
- Currently 5/2019, the org-all-targets is not found in org 9.

#+BEGIN_SRC emacs-lisp :tangle no
  (defun rjp/org-all-included-targets()
    "Get the ORG targets from the current file and all included ORG
  files.  If the included files include other files, this will recurse
    over all those files."
    (interactive)
    (save-excursion
      (let* ((inc-re "^#\\+INCLUDE:[ \t]+\"\\([^\t\n\r\"]*\\)\"[ \t]*.*$")
             (thisfile (buffer-file-name))
             (included-file-list (list thisfile)  )
             (targets (list nil))
             ;; A Function that can retrieve included files and targets
             ;; given a filename
             (f (lambda(file)
                  (let ((tmplst nil);; temporary include list
                        (buf (if (file-readable-p file)
                                 (find-file-noselect file)))
                        incfile ;; one include file from list
                        tgt)  ;; target
                    (if buf
                        (progn
                          (set-buffer buf)
                          (setq tgt (org-all-targets))
                          (nconc targets tgt) ;; append and nil tgt is removed

                          ;; Search for files included from here.
                          (goto-char (point-min))
                          (while (re-search-forward inc-re nil t)
                            (add-to-list 'tmplst
                                         (expand-file-name
                                          (match-string 1))))

                          ;; iterate over include list
                          (while tmplst
                            (setq incfile (car tmplst))
                            ;; if not already in list then ...
                            (if (not (member incfile '
                                             included-file-list))
                                (progn
                                  ;; Add to list and recurse
                                  (add-to-list 'included-file-list
                                               incfile)
                                  (setq tmplst (cdr tmplst))
                                  (funcall f incfile)))) ) ))) ))

        ;; Body of let statement
        (funcall f thisfile)
        ;; return value is targets
        (print (cdr targets))
        )))

;; Add a hook to bring up a tab list when TAB is hit after [[
  (add-hook 'org-tab-before-tab-emulation-hook
              (lambda (&rest args)
                ;; If at the right point (which is following two left square brackets)
                "list targets in org file and complete"
                (interactive "P")
                (if (string=
                     (buffer-substring-no-properties
                      (point) (- (point) 2)  )
                     "[[")
                    ;; Right place. Check if we are called with an argument
                    (insert (ido-completing-read
                             "Target:"
                             (if (equal args '(-))
                                 (rjp/org-all-included-targets)
                               (org-all-targets) ))
                            "]]")
                    (if (equal args '(-))
                        (rjp/org-all-i)
                      )  )))
#+END_SRC
** org tempo
For shortcuts since 9.2
#+begin_src emacs-lisp
;;(require 'org-tempo)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-modules
   (quote (org-tempo ))))
#+end_src
* Cygwin and Windows
Cygwin + Windows: [[http://emacswiki.org/emacs/NTEmacsWithCygwin][Emacs with Cygwin]]

** Cygwin
Set the shell to use cygwin's bash, if Emacs finds it is running
under Windows and c:\cygwin exists.  Assumes that c:\cygwin\bin is
not already in the Windows path.
#+begin_src emacs-lisp :tangle no
  (let* ((cygwin-root "c:/cygwin64")
         (cygwin-bin (concat cygwin-root "/bin")))
    (when (and (eq 'windows-nt system-type)
               (file-readable-p cygwin-root))

      (setq exec-path (cons cygwin-bin exec-path))
      (setenv "PATH" (concat cygwin-bin ";" (getenv "PATH")))

      ;; By default use the Windows HOME.
      ;; Otherwise, uncomment below to set a HOME
      ;;      (setenv "HOME" (concat cygwin-root "/home/eric"))

      ;; NT-emacs assumes a Windows shell. Change to baash.
      (setq shell-file-name "bash")
      (setenv "SHELL" shell-file-name)
      (setq explicit-shell-file-name shell-file-name)

      ;; This removes unsightly ^M characters that would otherwise
      ;; appear in the output of java applications.
      (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)))
#+end_src

** Fix auto-revert notify
In emacs 26.1 'auto-revert-use-notify' is set to t.  This causes
scrolling pauses.
[[https://www.masteringemacs.org/article/whats-new-in-emacs-26-1][whats new emacs 26.1]]
#+BEGIN_SRC emacs-lisp
  (when (eq 'cygwin system-type)
    (custom-set-variables
    '(auto-revert-use-notify nil)))
#+END_SRC

** Cygwin paths
#+begin_src emacs-lisp :tangle no
    ;; Fix windows problems of trying to check file permissions
    ;; Causes emacs to stutter
  (when (eq 'windows-nt system-type)
    (setq w32-get-true-file-attributes nil)
    ;; Cygwin mount paths
    (use-package cygwin-mount
      :ensure t
      :config
      (cygwin-mount-activate)    )
    )
#+end_src

** Line endings
On windows emacs uses dos line feeds. Fix this.
#+BEGIN_SRC emacs-lisp
(setq default-buffer-file-coding-system 'utf-8-unix)
#+END_SRC

** Changing the executable-find to find files without extension
#+BEGIN_SRC emacs-lisp :tangle no
  (when (eq 'windows-nt system-type)
    (defun executable-find (command)
      "Search for COMMAND in `exec-path' and return the absolute file name.
  Return nil if COMMAND is not found anywhere in `exec-path'."
      ;; Use 1 rather than file-executable-p to better match the behavior of
      ;; call-process.
      (locate-file command exec-path exec-suffixes :executable)))
#+END_SRC
** Slow startup time on disconnected machine
This is due to emacs not being able to obtain the hostname easily. To
solve this find the hosts file on Windows. For Windows 7 it is at
"c:\Windows\system32\drivers\etc".  Edit the hosts file and uncomment/add
the two lines below.
#+BEGIN_SRC
127.0.0.1  localhost loopback
::1        localhost
#+END_SRC

* Language Support

** Programming language hooks
#+begin_src emacs-lisp
  (defun rjp/prog-lang-common-hook ()
      ;(make-local-variable 'column-number-mode)
      ;(column-number-mode t)
      (auto-fill-mode t)
      (whitespace-mode t))
  (add-hook 'prog-mode-hook #'rjp/prog-lang-common-hook)
#+end_src

** Flycheck
Syntax check
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer 2
    :config
    (global-flycheck-mode)
    (setq flycheck-check-syntax-automatically '(mode-enabled save))
    (setq flycheck-idle-change-delay   5)
    )
#+END_SRC
** Highlight symbol
Highlight symbols
Doesn't currently work properly with hideshow
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package highlight-symbol
    :defer 2
    :config
    (add-hook 'prog-mode-hook (lambda () (highlight-symbol-mode)))
    (setq highlight-symbol-on-navigation-p t)
    (global-set-key [f3] 'highlight-symbol-next)
    (global-set-key [(shift f3)] 'highlight-symbol-prev))
#+END_SRC
** Comment region
C-c C-c is set to comment region in the cc-modes in the standard lisp
dirs. It would be preferable to bind a standard key to
comment-or-uncomment-region in all progmodes
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-c\C-c" 'comment-or-uncomment-region)
#+END_SRC
** Unprettify symbol at point
Remove any symbol prettiness at cursor
#+BEGIN_SRC emacs-lisp
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+END_SRC
** Generic Language extensions
#+BEGIN_SRC emacs-lisp :tangle no
  (setq auto-mode-alist
        (append '(
                  ;;("\\.m$"  . matlab-mode)
                  ;;("\\.pml$"  . promela-mode)
                  ("\\.smv$"  . nusmv-mode)
                  ("\\.spin$"  . promela-mode)
                  )
                auto-mode-alist))
#+END_SRC
** Paredit mode
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package paredit
    :defer 2
    :init
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode))
#+END_SRC
** Matlab
#+BEGIN_SRC emacs-lisp
  (use-package matlab-mode
    :mode "\\.m$"
    :config
    (setq matlab-indent-function t)
    (custom-set-variables
     '(matlab-functions-have-end t))
  )
  ;;(autoload 'matlab-mode "matlab" "Matlab Mode" t)

  ;;(autoload 'matlab-shell "matlab" "Interactive Matlab mode." t)
  ;;(setq matlab-shell-command "/usr/local/bin/matlabShell")

#+END_SRC
** VHDL
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(vhdl-hide-all-init t)
   '(vhdl-hideshow-menu t)
   '(vhdl-index-menu t)
   '(vhdl-speedbar-auto-open nil))
#+END_SRC
** C,C++
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'imenu-add-menubar-index)
(add-hook 'c++-mode-hook 'imenu-add-menubar-index)
(add-hook 'c-mode-hook '(lambda () (c-set-style "linux")))
(add-hook 'c++-mode-hook '(lambda () (c-set-style "linux")))
(add-hook 'objc-mode-hook '(lambda () (c-set-style "linux")))
;; ;;;;;;;;;;;; C, C++ customization
(setq ckeywords '("FILE" "\\sw+_t"  "u_\\sw*"
                  "_PRETTY_"))
(setq c-font-lock-extra-types ckeywords)
(setq c++-font-lock-extra-types ckeywords)
#+END_SRC
** Promela
#+BEGIN_SRC emacs-lisp
  (use-package promela-mode
    :mode "\\.pml\\'"
    :config
    (setq-default  promela-block-indent 8)
    (setq-default promela-auto-match-delimiter nil)
    )
  ;;(require 'promela-mode)
  ;;(setq-default  promela-block-indent 8)
  ;;(setq-default promela-auto-match-delimiter nil)
#+END_SRC
** NuSMV
#+BEGIN_SRC emacs-lisp
  (use-package nusmv-mode   :mode "\\.smv$")
  ;;(autoload 'nusmv-mode "nusmv-mode" "NuSMV mode")
#+END_SRC
** Latex
*** Configuration via starter kit
#+BEGIN_SRC emacs-lisp :tangle no
(starter-kit-load "latex")
#+END_SRC
*** Reftex
This section is no longer required.  Done by starter kit.
Add reftex mode
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'latex-mode-hook 'reftex-mode)
#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
(setq ruby-indent-level 4)
#+END_SRC

** TLA+
#+begin_src emacs-lisp
  (use-package tla-mode
    :mode "\\.tla$")
#+end_src
* Magit
Magit mostly just works.  Only thing to add here is to add a simple
keystroke to start it.
#+BEGIN_SRC emacs-lisp :tangle no
(define-key global-map "\C-xg" 'magit-status)
#+END_SRC
Remove VC for git
#+BEGIN_SRC emacs-lisp :tangle no
  (setq magit-refresh-status-buffer nil)
  (setq vc-handled-backends (delq 'Git vc-handled-backends))
#+END_SRC
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status)
    :bind
     (("C-x g" . magit-status))
    :config
    (setq magit-refresh-status-buffer nil)
    (setq vc-handled-backends (delq 'Git vc-handled-backends)))
#+end_src
* Helm and Projectile
** Helm for autocompletes
#+BEGIN_SRC emacs-lisp :tangle yes
 ;(use-package helm-config)
  (use-package helm
    :defer t
    :diminish helm-mode
    :init
    ;; http://tuhdo.github.io/helm-intro.html
    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
    ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))
    (require 'helm-config)
    :bind
    (("C-c h"  . helm-command-prefix)
     ("M-x"     . helm-M-x)
     ("M-y"     . helm-show-kill-ring)
     ;("C-x b"   . helm-buffers-list)
     ("C-x b"   . helm-mini)
     ("C-x C-f" . helm-find-files)
     ("C-c h o" . helm-occur)
     :map helm-map
     ([tab] . helm-execute-persistent-action)  ; rebind tab to run persistent action
     ("C-i"  . helm-execute-persistent-action) ; make TAB works in terminal
     ("C-z"  . helm-select-action))            ; list actions using C-z
    :config
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
          helm-recentf-fuzzy-match              t ; match recentf
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t)
    (helm-mode 1) )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  ;; http://tuhdo.github.io/helm-intro.html
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.

  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (when (require 'helm-config nil 'noerror)



    (global-set-key (kbd "M-x") 'helm-M-x)       ; Even without this, M-x does some helm completeion
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
          helm-recentf-fuzzy-match              t ; match recentf
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-c h o") 'helm-occur)
    (helm-mode 1)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

    )
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-projectile
    :commands (helm-projectile-find-file helm-projectile-switch-project)
    :bind
    (("C-c p p"  . helm-projectile-switch-project)
     ("C-c p f"  . helm-projectile-find-file))
    :custom
    (projectile-completion-system 'helm)
    :config
    (projectile-mode)
    (helm-projectile-on)
    ;; On windows native indexing is slow
    ;;(setq projectile-indexing-method 'alien)
    )
#+END_SRC
** Helm-AG
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package helm-ag
  :defer 4
  )
#+END_SRC
** Helm Gtags
To setup:
1. Install gnu global
2. Install pygments plugin for gnu global.
   1. autoconf, automake, libtool, pygments
3. Copy /usr/local/share/gtags/gtags.conf to .globalrc
4. Edit line default: to be
   #+BEGIN_VERSE
   default:\
        :tc=native:tc=pygments:
   #+END_VERSE

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package helm-gtags
    :defer 5
    :config
    (define-prefix-command 'helm-gtags-mode-map)
    (global-set-key (kbd "C-t") 'helm-gtags-mode-map)
    (add-hook 'prog-mode-hook (lambda () (helm-gtags-mode)))
    :bind (  :map helm-gtags-mode-map
                  ("f" . helm-gtags-find-tag-other-window)
                  ("s" . helm-gtags-show-stack)
                  ("c" . helm-gtags-create-tags)
                  ("u" . helm-gtags-update-tags))
         )
#+END_SRC
* Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC
* Completion with company-mode
1. Add company mode
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :defer 2
       :diminish
       :custom
       (company-show-numbers t)
       :config
       (global-company-mode))
   #+END_SRC
2. Add anaconda mode when python is used
   #+begin_src emacs-lisp
     (use-package anaconda-mode
       :commands anaconda-mode
       :diminish anaconda-mode
       :init
       (add-hook 'python-mode-hook #'anaconda-mode)
       (add-hook 'python-mode-hook #'eldoc-mode))
   #+end_src
3. And then company anaconda
   #+begin_src emacs-lisp
     (use-package company-anaconda
       :after (company anaconda-mode)
       :config
       (add-to-list 'company-backends 'company-anaconda)
       (add-hook 'python-mode-hook 'anaconda-mode))
   #+end_src
4. pos-tip
   We don't need this directly but company-quickhelp uses it
   #+begin_src emacs-lisp
     (use-package pos-tip
        :defer 3)
   #+end_src
5. company-quickhelp
   #+begin_src emacs-lisp
     (use-package pos-tip :defer t)
     (use-package company-quickhelp
                  :defer 5
                  :after (company pos-tip)
                  :config (company-quickhelp-mode)
                  )
   #+end_src

* Setup custom file
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
;(load custom-file)
#+end_src
* Utility functions
1. Print a list
   #+begin_src emacs-lisp
   (defun rjp/prinlist (lst)
   " Print out list elements: one on each line"
   (interactive)
       (dolist (l lst)
       (princ l)
       (princ "\n")
       ))
   #+end_src
2. Set line spacing (derived from ergoemacs)
   Inspired by http://ergoemacs.org/emacs/emacs_toggle_line_spacing.html
   #+begin_src emacs-lisp
     (defun rjp/set-line-spacing (spacing)
       "Set line spacing with an argument"
       (interactive "nEnter line spacing:")
       (if (zerop spacing)
           (setq line-spacing nil)
         (setq line-spacing spacing))
       (redraw-frame (selected-frame)))
   #+end_src
* Post setup and Final Scratch Message
1. Restore GC
   #+begin_src emacs-lisp
   (setq gc-cons-threshold 800000)
   (setq gc-cons-percentage 0.1)
   #+end_src
2. Set startup message
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message
           (concat "Ratish's emacs init: "
                   (prin1-to-string (emacs-init-time))))
   #+END_SRC
* UNUSED: Undo effects of starter kit
:PROPERTIES:
:header-args:  :tangle no
:END:
** Remove on the fly spell checking
#+begin_src emacs-lisp :tangle no
(remove-hook 'text-mode-hook 'turn-on-flyspell)
#+end_src
** Rebind C-x C-r to find file in read-only mode
starter kit maps this to rgrep
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-r" 'find-file-read-only)
#+END_SRC
** Undo parts of ido
ido uses the current cursor to guess at the filename to be
loaded. Disable.
#+BEGIN_SRC emacs-lisp
(set 'ido-use-filename-at-point nil)
#+END_SRC
** Do auto-fill for everything not just comments
#+BEGIN_SRC emacs-lisp
;;(setq comment-auto-fill-only-comments nil)
#+END_SRC
* UNUSED: From starter kit
:PROPERTIES:
:header-args:  :tangle no
:END:
  #+begin_src emacs-lisp
    (let ((elisp-dir (expand-file-name "src" starter-kit-dir)))
      ;; add the src directory to the load path
      (add-to-list 'load-path elisp-dir)
      ;; load specific files
      (when (file-exists-p elisp-dir)
        (let ((default-directory elisp-dir))
          (normal-top-level-add-subdirs-to-load-path))))
    (setq autoload-file (concat starter-kit-dir "loaddefs.el"))
    (setq package-user-dir (concat starter-kit-dir "elpa"))
    (setq custom-file (concat starter-kit-dir "custom.el"))
  #+end_src
- Ubiquitous Packages which should be loaded on startup rather than
  autoloaded on demand since they are likely to be used in every
  session.
  #+name: starter-kit-load-on-startup
  #+begin_src emacs-lisp
    (require 'cl)
    (require 'cl-lib)
    (require 'saveplace)
    (require 'ffap)
    (require 'uniquify)
    (require 'ansi-color)
    (require 'recentf)
  #+end_src
  #+begin_src emacs-lisp
    (require 'cl)
    (require 'cl-lib)
    ;;(require 'saveplace)
    ;;(require 'ffap)
    (require 'uniquify)
    ;;(require 'ansi-color)
    (require 'recentf)
  #+end_src

- From custom
  #+begin_src emacs-lisp
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(auto-revert-use-notify nil)
     '(org-latex-format-drawer-function (quote rjp/org-latex-drawer-format))
     '(package-selected-packages
       (quote
        (esup company-anaconda company use-package rainbow-delimiters magit indent-guide helm-projectile helm-gtags helm-ag flycheck auctex)))
     '(vhdl-hide-all-init t)
     '(vhdl-hideshow-menu t)
     '(vhdl-index-menu t)
     '(vhdl-speedbar-auto-open nil))
  #+end_src

** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp
    (when window-system
      (setq frame-title-format '(buffer-file-name "%f" ("%b")))
      (blink-cursor-mode -1)
      (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))

    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)

    (setq visible-bell t
          echo-keystrokes 0.1
          font-lock-maximum-decoration t
          inhibit-startup-message t
          transient-mark-mode t
          color-theme-is-global t
          delete-by-moving-to-trash t
          shift-select-mode nil
          truncate-partial-width-windows nil
          uniquify-buffer-name-style 'forward
          whitespace-style '(trailing lines space-before-tab
                                      indentation space-after-tab)
          whitespace-line-column 100
          ediff-window-setup-function 'ediff-setup-windows-plain
          ;oddmuse-directory (concat starter-kit-dir "oddmuse")
          xterm-mouse-mode t
          ;save-place-file (concat starter-kit-dir "places")
  )
#+end_src

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Save a list of recent files visited.
#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src emacs-lisp

** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp
(when (> emacs-major-version 21)
  (ido-mode t)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point t
        ido-max-prospects 10))
#+end_src

** Other, spell checking, tabs, imenu and a coding hook
#+begin_src emacs-lisp
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (eval-after-load "ispell"
    '(when (executable-find ispell-program-name)
       (add-hook 'text-mode-hook 'turn-on-flyspell)))

  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")

  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

*** possible issues/resolutions with flyspell
Most of the solution came from [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki-FlySpell]].  Here is one
possible fix.

**** Emacs set path to aspell
it's possible aspell isn't in your path
#+begin_src emacs-lisp
   (setq exec-path (append exec-path '("/opt/local/bin")))
#+end_src

**** Emacs specify spelling program
- This didn't work at first, possibly because cocoAspell was
  building its dictionary.  Now it seems to work fine.
#+begin_src emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-dictionary "english"
        ispell-dictionary-alist
        (let ((default '("[A-Za-z]" "[^A-Za-z]" "[']" nil
                         ("-B" "-d" "english" "--dict-dir"
                          "/Library/Application Support/cocoAspell/aspell6-en-6.0-0")
                         nil iso-8859-1)))
          `((nil ,@default)
            ("english" ,@default))))
#+end_src

** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
  (when (boundp 'hippie-expand-try-functions-list)
    (delete 'try-expand-line hippie-expand-try-functions-list)
    (delete 'try-expand-list hippie-expand-try-functions-list))
#+end_src

** Don't clutter up directories with files~
Rather than saving backup files scattered all over the file system,
let them live in the =backups/= directory inside of the starter kit.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat starter-kit-dir "backups")))))
#+end_src

** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

** Cosmetics

#+begin_src emacs-lisp
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))
#+end_src



