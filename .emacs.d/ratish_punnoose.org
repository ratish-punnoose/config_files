#+TITLE: Ratish Punnoose's Emacs configuration
#+STARTUP: indent
#+STARTUP: hidestars

* Introduction
  Inspired by Sasha Chua's org mode base emacs configuration using
  org-babel. This is called from init.el. This is stored in a git
  repo in a local branch.  Note that this uses the [[http://eschulte.github.io/emacs24-starter-kit/][Emacs24 starter kit]].

#+begin_src emacs-lisp
;; Do not edit this file. This is autogenerated from the corresponding .org file.
#+end_src
* Undo effects of starter kit
** Remove on the fly spell checking
#+begin_src emacs-lisp
(remove-hook 'text-mode-hook 'turn-on-flyspell)
#+end_src
** Rebind C-x C-r to find file in read-only mode
starter kit maps this to rgrep
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-r" 'find-file-read-only)
#+END_SRC
** Undo parts of ido
ido uses the current cursor to guess at the filename to be
loaded. Disable.
#+BEGIN_SRC emacs-lisp
(set 'ido-use-filename-at-point nil)
#+END_SRC
** Do auto-fill for everything not just comments
#+BEGIN_SRC emacs-lisp
;;(setq comment-auto-fill-only-comments nil)
#+END_SRC
* Global Options
#+BEGIN_SRC emacs-lisp
;; Reload files automatically
(global-auto-revert-mode 1)

;; Use electric buffers
(global-set-key "\C-x\C-b" 'electric-buffer-list)

(define-key global-map "\M-g" 'goto-line)

#+END_SRC
* Package Management
#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'use-package))
#+END_SRC
* Appearance
** Font
Set default font to Consolas.  This is done using 
Options-> Save Options.
#+begin_src emacs-lisp
    ;;(set-default-font "-outline-Consolas-normal-normal-normal-mono-*-*-*-*-c-*-iso8859-1")
  (cond ((eq system-type 'windows-nt)
         (custom-set-faces
          ;; custom-set-faces was added by Custom.
          ;; If you edit it by hand, you could mess it up, so be careful.
          ;; Your init file should contain only one such instance.
          ;; If there is more than one, they won't work right.
          '(default ((t (:family "Consolas" :foundry "outline" :slant normal 
                                 :weight normal :height 113 :width normal))))))
        ((eq system-type 'gnu/linux)
         (custom-set-faces
          ;; custom-set-faces was added by Custom.
          ;; If you edit it by hand, you could mess it up, so be careful.
          ;; Your init file should contain only one such instance.
          ;; If there is more than one, they won't work right.
          '(default ((t (:family "Inconsolata" :foundry "outline" :slant normal 
                                 :weight normal :height 113 :width normal)))))))    
  (global-font-lock-mode t)
#+end_src

** Window appearance
*** Colors
#+begin_src emacs-lisp
(setq default-frame-alist
      '((minibuffer . 1) 
         (menu-bar-lines . 1)
         (cursor-color .  "cyan")
         (foreground-color . "grey" )
         (background-color . "black")
         (mouse-color . "yellow" )))
#+end_src  
*** Color themes
To use a color theme. Use load-library and then color-theme.
Suitable color themes are aalto-dark, aalto-light,
color-theme-alice-blue, color-theme-andreas
*** Disable toolbar
#+begin_src emacs-lisp
(if window-system
    (tool-bar-mode -1)
)
#+end_src

*** Title and Status [[http://mnemonikk.org/][mnemonikk]]
#+begin_src emacs-lisp
(setq frame-title-format
      '(buffer-file-name "%f"
                                 (dired-directory dired-directory "%b")))
(setq-default mode-line-buffer-identification
              (cons
               '(:eval (replace-regexp-in-string "^.*/\\(.*\\)/" "\\1/" default-directory))
               mode-line-buffer-identification))
(display-time)
(setq display-time-day-and-date t)
(setq line-number-mode t)
(setq column-number-mode t)
(setq next-line-add-newlines nil)
(setq blink-matching-paren t)
#+end_src
** Scroll Bars
   Add scroll bars
#+begin_src emacs-lisp
;;(setq scroll-bar-mode 1)
;;(toggle-scroll-bar)
#+end_src

** HideShow
;; Invoke HideShow mode with M-x hs-minor-mode.
;; For Emacs 20:
;;    * C-c S show all
;;    * C-c H hide all
;;    * C-c s show block
;;    * C-c h hide block
;;
;; For Emacs 21:
;; 
;;    * C-c @ ESC C-s show all
;;    * C-c @ ESC C-h hide all
;;    * C-c @ C-s show block
;;    * C-c @ C-h hide block
;;    * C-c @ C-c toggle hide/show
;; http://www.emacswiki.org/cgi-bin/wiki/HideShow
;;http://www.gnu.org/software/emacs/manual/html_node/Hideshow.html#Hideshow
#+BEGIN_SRC emacs-lisp
  (setq hs-hide-comments-when-hiding-all t)
  
  ;; Add Promela
  ;;(add-to-list 'hs-special-modes-alist '(promela-mode "{" "}" "/[*/]" nil nil))
  
  ;;  Toggle hide/show for a specific block
  (global-set-key (kbd "C-,") 'hs-toggle-hiding)
  
  ;; Global toggle
  (defvar rjp/hs-status nil "Current state of hideshow")
  (defun rjp/toggle-hs-all() "Toggle hideshow all."
    (interactive)
    (setq rjp/hs-status (not rjp/hs-status))
    (if rjp/hs-status (hs-hide-all) (hs-show-all)))
  (global-set-key (kbd "C-M-,") 'rjp/toggle-hs-all)
  
  ;; Startup in hs-minor-mode with all hidden
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (add-hook 'hs-minor-mode-hook #'hs-hide-all)
#+END_SRC

** Indent guide
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
               :ensure t
               :defer 2
               :config
               (indent-guide-global-mode)
               (setq indent-guide-delay 0.5) 
               (setq indent-guide-recursive t))
#+END_SRC

** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters 
                   :ensure t
                   :defer 2
                   :config
                   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Navigation
Easier keys for switching windows

** For moving to next/previous window
#+begin_src emacs-lisp :tangle no
(defun select-next-window ()
  "Switch to the next window" 
  (interactive)
  (select-window (next-window)))

(defun select-previous-window ()
  "Switch to the previous window" 
  (interactive)
  (select-window (previous-window)))

(global-set-key (kbd "M-n") 'select-next-window)
(global-set-key (kbd "M-p")  'select-previous-window)


#+end_src
** For moving using arrows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<left>") 'windmove-left)          ; move to left windnow
(global-set-key (kbd "C-<right>") 'windmove-right)        ; move to right window
(global-set-key (kbd "C-<up>") 'windmove-up)              ; move to upper window
(global-set-key (kbd "C-<down>") 'windmove-down)          ; move to downer window
#+END_SRC
* Search at Point
To use this, start search with C-s and then type C-*.
Note: find-tag-default-as-regexp and find-tag-default-as-symbol-regexp
are useful here.
#+BEGIN_SRC emacs-lisp
(defun isearch-yank-symbol ()
  "*Put symbol at current point into search string."
  (interactive)
  (let ((sym (symbol-at-point)))
    (if sym
        (progn
          (setq isearch-regexp t
                isearch-string (find-tag-default-as-regexp)
                isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
                isearch-yank-flag t))
      (ding)))
  (isearch-search-and-update))
;;(define-key isearch-mode-map (kbd "C-*") 'isearch-yank-symbol)
(define-key isearch-mode-map [(down)] 'isearch-yank-symbol)
#+END_SRC
* Copy word at point
#+BEGIN_SRC emacs-lisp
  (defun rjp/copy-word-at-point ()
      "Copy word at point with underscores."
      (interactive)
      (kill-new (thing-at-point 'symbol) ))
  (define-key global-map (kbd "\C-xw") 'rjp/copy-word-at-point)
#+END_SRC
* Tags
#+BEGIN_SRC emacs-lisp
;; Tags search
(global-set-key "\C-t" 'tags-search)
#+END_SRC
* Org-mode
** Setup before loading org
Loading it in this file does not work since org has to be started to
evaluate this file itself.

** Automatically added by starter kit.
- Speed commands: Use ? at beginning of headlines to see.
- Code block fontification

#+begin_src emacs-lisp 
(starter-kit-load "org")
#+end_src

** Org global configuration and shortcuts
#+begin_src emacs-lisp 
;;(set-time-zone-rule "GMT+8")
;;(set-time-zone-rule "PST")
(setq org-directory "~/org")


(global-set-key "\C-cl" 'org-store-link)
;; Use C-c C-l to insert link
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(setq org-hide-leading-stars t)

#+end_src
** Org capture
#+begin_src emacs-lisp :tangle yes
(setq  org-agenda-files (quote ("~/org/jnl.org")))
(setq  org-refile-targets '((org-agenda-files  :maxlevel . 3)))
(setq org-default-notes-file (concat org-directory "/jnl.org"))
(setq org-log-done 'time) ;; Record time of task completion
(setq org-clock-into-drawer 1) 
;; (setq org-log-done 'note) ;; Record time+note of task completion

;; C-c c     (org-capture) Call the command org-capture
;; C-c C-c     (org-capture-finalize)
;;      Once you have finished entering information into the capture buffer, 
;; C-c C-w (refile)
;; C-c C-k abort capture
;; C-u C-c c visit target of capture template
;; C-u C-u C-c c Visit last stored capture item in its buffer
;; C-0 + C-c c  capture at point in an org buffer
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/jnl.org" "Todolist")
             "* TODO %?\n  %iAdded: %U")
	      ("d" "Date" entry (file+datetree+prompt "~/org/jnl.org")
             "* %?")        
        ("j" "Journal" entry (file+datetree "~/org/jnl.org")
             "* %?\nAdded: %U\n  %i")
	      ("n" "NowAction" entry (file+datetree "~/org/jnl.org")
             "* %?" :clock-in t :clock-resume t)))

;; To define special keys to capture to a particular template without going through the interactive template selection, you can create your key binding like this:

(define-key global-map "\C-ct"
      (lambda () (interactive) (org-capture nil "t")))

#+end_src
Also log into drawer
#+BEGIN_SRC emacs-lisp
(set 'org-log-into-drawer t)
#+END_SRC
** Org beamer
*** Emphasis lists are set before org is loaded. Currently this is set in [[file:init.el::(setq%20org-emphasis-alist][init.el]].
Note in init.el by self describes that it is not used by beamer
anymore.  Don't remember details.
#+begin_src emacs-lisp :tangle no
  (setq org-emphasis-alist 
        (quote (("*" bold "<b>" "</b>") 
                ("/" italic "<i>" "</i>")
                ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                ("=" org-code "<code>" "</code>" verbatim)
                ("~" org-verbatim "<code>" "</code>" verbatim)
                ("+" (:strike-through t) "<del>" "</del>")
                ("@" org-warning "<b>" "</b>")))
        org-export-latex-emphasis-alist 
        (quote (("*" "\\textbf{%s}" nil)
                ("/" "\\emph{%s}" nil) 
                ("_" "\\underline{%s}" nil)
                ("+" "\\texttt{%s}" nil)
                ("=" "\\verb=%s=" nil)
                ("~" "\\verb~%s~" t)
                ("@" "\\alert{%s}" nil)))
        )
  
#+end_src
*** Set code export to minted
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ox-latex
    :defer 5
    :config
    (setq org-latex-listings 'minted)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-minted-options
             '(("frame" "lines")
               ("fontsize" "\\scriptsize")
               ("linenos" ""))) 
    ;; Add language alias
    (add-to-list 'org-latex-minted-langs '(verilog "v"))      )
#+END_SRC

** Org diff
My customization to allow folding and unfolding
#+BEGIN_SRC emacs-lisp
  ;; diff hooks for org mode
  (add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
  (add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
  ;; Check for org mode and existence of buffer
  (defun f-ediff-org-showhide(buf command &rest cmdargs)
    "If buffer exists and is orgmode then execute command"
    (if buf
        (if (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
            (save-excursion (set-buffer buf) (apply command cmdargs)))
      )
    )
    
  (defun f-ediff-org-unfold-tree-element ()
    "Unfold tree at diff location"
    (f-ediff-org-showhide ediff-buffer-A 'org-reveal)  
    (f-ediff-org-showhide ediff-buffer-B 'org-reveal)  
    (f-ediff-org-showhide ediff-buffer-C 'org-reveal)  
    )
  ;;
  (defun f-ediff-org-fold-tree ()
    "Fold tree back to top level"
    (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)  
    (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)  
    (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1)  
    )
#+END_SRC

** Export drawers with latex
Export org-drawers with latex enclosed in a \drawername{contents}
format.
#+BEGIN_SRC emacs-lisp
    (defun rjp/chomp (str)
          "Chomp leading and tailing whitespace from STR."
          (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'"
                               str)
            (setq str (replace-match "" t t str)))
          str)
    ;;
    (defun rjp/org-latex-drawer-format (name contents)
      "Create a customized latex drawer export"
      (format "\n\\%s{%s}\n" name (rjp/chomp contents) )
    )
    ;;
    (custom-set-variables  
     '(org-latex-format-drawer-function 
       (quote rjp/org-latex-drawer-format))       ) 
    ;;
#+END_SRC
** Org-present
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 
              '(lambda() 
                 (autoload 'org-present "org-present" nil t)))
  (add-hook 'org-present-mode-hook
             (lambda ()
               (org-present-big)
               (org-display-inline-images)))
  
  (add-hook 'org-present-mode-quit-hook
             (lambda ()
               (org-present-small)
               (org-remove-inline-images)))
#+END_SRC
** List of targets
Can use org-all-targets *Automatically added by starter kit. 
- Use org-in-regexp 
- org-bracket-link-regexp
- Option for using prefix C-u - Tab to send a prefix arg to the
  following function since in org-cycle,
  run-hook-with-args-until-success is not passed the arguments
#+BEGIN_SRC emacs-lisp
  (defun rjp/org-all-included-targets()
    "Get the ORG targets from the current file and all included ORG
  files.  If the included files include other files, this will recurse
    over all those files."
    (interactive)
    (save-excursion 
      (let* ((inc-re "^#\\+INCLUDE:[ \t]+\"\\([^\t\n\r\"]*\\)\"[ \t]*.*$") 
             (thisfile (buffer-file-name))
             (included-file-list (list thisfile)  )
             (targets (list nil))
             ;; A Function that can retrieve included files and targets
             ;; given a filename
             (f (lambda(file) 
                  (let ((tmplst nil);; temporary include list
                        (buf (if (file-readable-p file)
                                 (find-file-noselect file)))
                        incfile ;; one include file from list
                        tgt)  ;; target
                    (if buf
                        (progn
                          (set-buffer buf)
                          (setq tgt (org-all-targets))
                          (nconc targets tgt) ;; append and nil tgt is removed

                          ;; Search for files included from here.
                          (goto-char (point-min))
                          (while (re-search-forward inc-re nil t)
                            (add-to-list 'tmplst
                                         (expand-file-name
                                          (match-string 1))))

                          ;; iterate over include list
                          (while tmplst 
                            (setq incfile (car tmplst)) 
                            ;; if not already in list then ...
                            (if (not (member incfile '
                                             included-file-list))
                                (progn
                                  ;; Add to list and recurse
                                  (add-to-list 'included-file-list 
                                               incfile)
                                  (setq tmplst (cdr tmplst))
                                  (funcall f incfile)))) ) ))) ))

        ;; Body of let statement
        (funcall f thisfile)    
        ;; return value is targets
        (print (cdr targets))
        )))

;; Add a hook to bring up a tab list when TAB is hit after [[
  (add-hook 'org-tab-before-tab-emulation-hook 
              (lambda (&rest args)  
                ;; If at the right point (which is following two left square brackets)
                "list targets in org file and complete"
                (interactive "P")
                (if (string= 
                     (buffer-substring-no-properties 
                      (point) (- (point) 2)  ) 
                     "[[")
                    ;; Right place. Check if we are called with an argument
                    (insert (ido-completing-read 
                             "Target:" 
                             (if (equal args '(-))
                                 (rjp/org-all-included-targets)
                               (org-all-targets) ))   
                            "]]")
                    (if (equal args '(-))
                        (rjp/org-all-i)
                      )  )))
#+END_SRC
* Cygwin and Windows
Cygwin + Windows: [[http://emacswiki.org/emacs/NTEmacsWithCygwin][Emacs with Cygwin]]

** Cygwin
Set the shell to use cygwin's bash, if Emacs finds it is running
under Windows and c:\cygwin exists.  Assumes that c:\cygwin\bin is
not already in the Windows path.
#+begin_src emacs-lisp
  (let* ((cygwin-root "c:/cygwin64")
         (cygwin-bin (concat cygwin-root "/bin")))
    (when (and (eq 'windows-nt system-type) 
               (file-readable-p cygwin-root))
    
      (setq exec-path (cons cygwin-bin exec-path))
      (setenv "PATH" (concat cygwin-bin ";" (getenv "PATH")))
    
      ;; By default use the Windows HOME.
      ;; Otherwise, uncomment below to set a HOME
      ;;      (setenv "HOME" (concat cygwin-root "/home/eric"))
    
      ;; NT-emacs assumes a Windows shell. Change to baash.
      (setq shell-file-name "bash")
      (setenv "SHELL" shell-file-name) 
      (setq explicit-shell-file-name shell-file-name) 
    
      ;; This removes unsightly ^M characters that would otherwise
      ;; appear in the output of java applications.
      (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)))
#+end_src 

** Cygwin paths
#+begin_src emacs-lisp
    ;; Fix windows problems of trying to check file permissions
    ;; Causes emacs to stutter
  (when (eq 'windows-nt system-type)
    (setq w32-get-true-file-attributes nil)
    ;; Cygwin mount paths
    (use-package cygwin-mount
      :ensure t
      :config
      (cygwin-mount-activate)    )
    )
#+end_src

** Line endings
On windows emacs uses dos line feeds. Fix this.
#+BEGIN_SRC emacs-lisp
(setq default-buffer-file-coding-system 'utf-8-unix)
#+END_SRC

** Slow startup time on disconnected machine
This is due to emacs not being able to obtain the hostname easily. To
solve this find the hosts file on Windows. For Windows 7 it is at
"c:\Windows\system32\drivers\etc".  Edit the hosts file and uncomment/add
the two lines below.
#+BEGIN_SRC 
127.0.0.1  localhost loopback
::1        localhost
#+END_SRC

* Language Support
** Turn on starter-kit-coding-hook for progmodes
#+BEGIN_SRC emacs-lisp
(defun starter-kit-local-comment-auto-fill ()
    (auto-fill-mode t))

(add-hook 'prog-mode-hook #'run-starter-kit-coding-hook)
;;(add-hook 'prog-mode-hook #'auto-fill-mode)
#+END_SRC
** Highlight symbol
Highlight symbols
Doesn't currently work properly with hideshow
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package 'highlight-symbol
    :defer 2
    :config
    (add-hook 'prog-mode-hook (lambda () (highlight-symbol-mode)))
    (setq highlight-symbol-on-navigation-p t)
    (global-set-key [f3] 'highlight-symbol-next)
    (global-set-key [(shift f3)] 'highlight-symbol-prev))
#+END_SRC
** Comment region
C-c C-c is set to comment region in the cc-modes in the standard lisp
dirs. It would be preferable to bind a standard key to
comment-or-uncomment-region in all progmodes
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-c\C-c" 'comment-or-uncomment-region)
#+END_SRC
** Generic Language extensions
#+BEGIN_SRC emacs-lisp :tangle no
  (setq auto-mode-alist
        (append '(
                  ;;("\\.m$"  . matlab-mode)
                  ;;("\\.pml$"  . promela-mode)
                  ("\\.smv$"  . nusmv-mode)
                  ("\\.spin$"  . promela-mode)
                  )
                auto-mode-alist))
#+END_SRC
** Paredit mode
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package paredit
    :ensure t
    :defer 2
    :init
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode))
#+END_SRC
** Matlab
#+BEGIN_SRC emacs-lisp
  (use-package matlab-mode
    :mode "\\.m$"
    :config
    (setq matlab-indent-function t)
    (custom-set-variables
     '(matlab-functions-have-end t))
  )
  ;;(autoload 'matlab-mode "matlab" "Matlab Mode" t)

  ;;(autoload 'matlab-shell "matlab" "Interactive Matlab mode." t)
  ;;(setq matlab-shell-command "/usr/local/bin/matlabShell")

#+END_SRC
** VHDL
#+BEGIN_SRC emacs-lisp
  (custom-set-variables 
   '(vhdl-hide-all-init t)
   '(vhdl-hideshow-menu t)
   '(vhdl-index-menu t)
   '(vhdl-speedbar-auto-open nil))
#+END_SRC
** C,C++
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'imenu-add-menubar-index)
(add-hook 'c++-mode-hook 'imenu-add-menubar-index)
(add-hook 'c-mode-hook '(lambda () (c-set-style "linux")))
(add-hook 'c++-mode-hook '(lambda () (c-set-style "linux")))
(add-hook 'objc-mode-hook '(lambda () (c-set-style "linux")))
;; ;;;;;;;;;;;; C, C++ customization
(setq ckeywords '("FILE" "\\sw+_t"  "u_\\sw*"
		  "_PRETTY_"))
(setq c-font-lock-extra-types ckeywords)
(setq c++-font-lock-extra-types ckeywords)
#+END_SRC
** Promela
#+BEGIN_SRC emacs-lisp
  (use-package promela-mode
    :mode "\\.pml\\'"
    :config
    (setq-default  promela-block-indent 8)
    (setq-default promela-auto-match-delimiter nil)
    )
  ;;(require 'promela-mode)
  ;;(setq-default  promela-block-indent 8)
  ;;(setq-default promela-auto-match-delimiter nil)
#+END_SRC
** NuSMV
#+BEGIN_SRC emacs-lisp
  (use-package nusmv-mode   :mode "\\.smv$")
  ;;(autoload 'nusmv-mode "nusmv-mode" "NuSMV mode")
#+END_SRC
** Latex
*** Configuration via starter kit
#+BEGIN_SRC emacs-lisp
(starter-kit-load "latex")
#+END_SRC
*** Reftex 
This section is no longer required.  Done by starter kit.
Add reftex mode  
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'latex-mode-hook 'reftex-mode)
#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
(setq ruby-indent-level 4)
#+END_SRC
* Magit
Magit mostly just works.  Only thing to add here is to add a simple
keystroke to start it.
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-xg" 'magit-status)
#+END_SRC
* Helm
Helm for autocompletes
#+BEGIN_SRC emacs-lisp
  ;; http://tuhdo.github.io/helm-intro.html
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (when (require 'helm-config nil 'noerror)

      
    (global-set-key (kbd "M-x") 'helm-M-x)       ; Even without this, M-x does some helm completeion
    
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-c h o") 'helm-occur)
    (helm-mode 1)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
    
    )
#+END_SRC
* Projectile and Helm Projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (require 'helm-projectile nil 'noerror)
    (projectile-global-mode)
    (setq projectile-completion-system 'helm)
    (helm-projectile-on)
    ;; On windows native indexing is slow
    ;;(setq projectile-indexing-method 'alien)
    )
#+END_SRC
* Testing
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "dummy message")
#+END_SRC







