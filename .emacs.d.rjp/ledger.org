#+TITLE: Ledger config
#+AUTHOR: Ratish Punnoose
#+STARTUP: entitiespretty indent hidestars
#+OPTIONS: ^:{}


* Ledger CLI
  #+begin_src emacs-lisp
    (use-package ledger-mode
      :mode (("\\.ledger\\'" . ledger-mode))
      :custom
      (ledger-clear-whole-transactions t)
      (safe-local-variable-values (quote ((ledger-master-file . "main.ledger"))))
      (ledger-default-date-format "%Y-%m-%d")
      :config
      (defun ledger-do-reconcile (&optional sort)
        "SORT the uncleared transactions in the account and display them in the *Reconcile* buffer.
        Return a count of the uncleared transactions."
        (let* ((buf ledger-buf)
               (account ledger-acct)
               (sort-by (if sort
                            sort
                          "(date)"))
               (xacts
                (with-temp-buffer
                  (ledger-exec-ledger buf (current-buffer)
                                      "--uncleared" "--real" "emacs" "--sort" sort-by account)
                  (goto-char (point-min))
                  (unless (eobp)
                    (if (looking-at "(")
                        (progn
                          (while (re-search-forward "\"\"" nil t)
                            (replace-match "\""))
                          (goto-char (point-min))
                          (read (current-buffer)))))))
               (fmt (ledger-reconcile-compile-format-string ledger-reconcile-buffer-line-format)))
          (if (> (length xacts) 0)
              (progn
                (if ledger-reconcile-buffer-header
                    (insert (format ledger-reconcile-buffer-header account)))
                (dolist (xact xacts)
                  (ledger-reconcile-format-xact xact fmt))
                (goto-char (point-max))
                (delete-char -1)) ;gets rid of the extra line feed at the bottom of the list
            (insert (concat "There are no uncleared entries for " account)))
          (goto-char (point-min))
          (set-buffer-modified-p nil)
          (setq buffer-read-only t)

          (length xacts)))
      (defun rjp/ledger-copy-trans (pos)
        (interactive "d")
        (let ((bounds (ledger-navigate-find-xact-extents pos)))
          (copy-region-as-kill (car bounds) (cadr bounds))) )
      (defun rjp/ledger-timeorder-xact ()
        "Move the current transaction to the right chronological order"
        (interactive)
        (let* ((extents (ledger-navigate-find-xact-extents (point)))
               (transaction (buffer-substring-no-properties
                             (car extents)
                             (cadr extents)))
               (datestr (ledger-xact-date))
               (transdate)
               )
          (if (not datestr) nil
          (setq transdate (ledger-parse-iso-date datestr))
          (delete-region (car extents) (car (cdr extents)))
          (ledger-xact-find-slot transdate)
          (insert transaction  "\n\n" )
          (beginning-of-line -1)
          (ledger-navigate-beginning-of-xact))

          )
        )

      (defun rjp/ledger-occur-copy-all ()
        (interactive)
        (let ((matches (ledger-occur-compress-matches
                        (ledger-occur-find-matches
                         ledger-occur-current-regex)))
              (tmpbuf (get-buffer-create "*tmpbuf*"))
              )
          (with-current-buffer tmpbuf (erase-buffer))
          (dolist (m matches)
            ;;  Each match item is a tuple of begin and end
            ;;  Copy each region
            (append-to-buffer tmpbuf (car m) (car (cdr m)))
            (with-current-buffer tmpbuf (insert "\n\n"))
            )
          (with-current-buffer tmpbuf
            (copy-region-as-kill (point-min) (point-max))
            )
          )
        )
      :commands (rjp/ledger-copy-trans rjp/ledger-occur-copy-all)
      :bind
      (:map ledger-mode-map
            ("C-c M-w" . 'rjp/ledger-copy-trans)
            ("C-c C-m" . 'rjp/ledger-timeorder-xact)
            )
      (:map ledger-occur-mode-map
            ("C-c C-w" . 'rjp/ledger-occur-copy-all))
      )
  #+end_src


